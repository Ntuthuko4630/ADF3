{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "SupplyDataStore-DF-AFR-DEV-3"
		},
		"DataStore_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'DataStore'"
		},
		"PhysChem_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'PhysChem'"
		},
		"ReferenceData_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ReferenceData'"
		},
		"SupplyBlobStore_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SupplyBlobStore'"
		},
		"SupplyFiles_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SupplyFiles'"
		},
		"SupplyStorage_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SupplyStorage'"
		},
		"TargetSource_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'TargetSource'"
		},
		"lsPhysChem_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'lsPhysChem'"
		},
		"lsPhysChemSink_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'lsPhysChemSink'"
		},
		"supplydatastore_server_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'supplydatastore_server'"
		},
		"OnPremise_properties_typeProperties_linkedInfo_resourceId": {
			"type": "string",
			"defaultValue": "/subscriptions/15bcebd1-794e-49c6-9548-8a4a4357ee16/resourcegroups/SupplyDataStoreRG-RG-AFR-DEV/providers/Microsoft.DataFactory/factories/SupplyDataStore-DF-AFR-DEV-2/integrationruntimes/OnPremise"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/BlobRead')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "KPI_NAME ",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "KPI_READ",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "KPI_CODE ",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "KPI_NAME",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "BlobRead1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "KPILookup",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Dev"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-02T10:03:32Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/BlobRead1')]",
				"[concat(variables('factoryId'), '/datasets/KPILookup')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dynamic Backup Child')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Dynamic Child Backup Activity",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DynBackupSource",
								"type": "DatasetReference",
								"parameters": {
									"Table": {
										"value": "@pipeline().parameters.Table",
										"type": "Expression"
									},
									"Schema": {
										"value": "@pipeline().parameters.Schema",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DynBackupSink",
								"type": "DatasetReference",
								"parameters": {
									"Schema": {
										"value": "@pipeline().parameters.Schema",
										"type": "Expression"
									},
									"Table": {
										"value": "@pipeline().parameters.Table",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Schema": {
						"type": "string"
					},
					"Table": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Dynamic Backup"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-02T10:03:35Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DynBackupSource')]",
				"[concat(variables('factoryId'), '/datasets/DynBackupSink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dynamic Backup Parent')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup Tables",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT TABLE_SCHEMA as schemas,\n\tTABLE_NAME as tables\nFROM INFORMATION_SCHEMA.TABLES\nWHERE TABLE_TYPE = 'BASE TABLE'\nAND TABLE_SCHEMA <> 'dbo'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DynBackupControl",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "DynBackup_ForEach",
						"description": "Copy tables to data store",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup Tables').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "MasterPipeline",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Dynamic Backup Child",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"Schema": {
												"value": "@{item().schemas}",
												"type": "Expression"
											},
											"Table": {
												"value": "@{item().tables}",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Dynamic Backup"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-02T10:03:36Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DynBackupControl')]",
				"[concat(variables('factoryId'), '/pipelines/Dynamic Backup Child')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FactKPI_ETL2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "FactKPIStaging Flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DFFactKPI_ETL2",
								"type": "DataFlowReference",
								"parameters": {
									"BatchNumber": "toLong(0)"
								},
								"datasetParameters": {
									"StagingTable": {},
									"SourceIDs": {},
									"FactLookup": {},
									"MetricLookup": {},
									"SIteLookup": {},
									"LocationLookup": {},
									"TimeLineLookup": {},
									"PackLineLookup": {},
									"BrewhouseLookup": {},
									"FactCopy": {},
									"UpdateFact2": {},
									"UpdateFact1": {},
									"InsertFactD": {},
									"SiteLookupCache": {},
									"MetricLookupCache": {},
									"LocationCache": {},
									"TimeLineCache": {},
									"PackLineCache": {},
									"BrewhouseCache": {},
									"InsertFactWM": {},
									"UpdateTracker1": {},
									"UpdateTracker2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "InsertFacts",
						"description": "Insert facts from the fact staging table",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "FactKPIStaging Flow",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[DW].[spInsertFacts]"
						},
						"linkedServiceName": {
							"referenceName": "supplydatastore_server",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Complete"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-02T10:03:40Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DFFactKPI_ETL2')]",
				"[concat(variables('factoryId'), '/linkedServices/supplydatastore_server')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FactKPI_ETL2_copy1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "GetBatchNumber",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DFFactKPI_ETL2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"StagingTable": {},
									"SourceIDs": {},
									"FactLookup": {},
									"MetricLookup": {},
									"SIteLookup": {},
									"LocationLookup": {},
									"TimeLineLookup": {},
									"PackLineLookup": {},
									"BrewhouseLookup": {},
									"FactCopy": {},
									"UpdateFact2": {},
									"UpdateFact1": {},
									"InsertFactD": {},
									"SiteLookupCache": {},
									"MetricLookupCache": {},
									"LocationCache": {},
									"TimeLineCache": {},
									"PackLineCache": {},
									"BrewhouseCache": {},
									"InsertFactWM": {},
									"UpdateTracker1": {},
									"UpdateTracker2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Create New Batch",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[AU].[spInsertBatch]",
							"storedProcedureParameters": {
								"Description": {
									"value": "SDLevers Fact Load",
									"type": "String"
								},
								"Rows": {
									"value": "0",
									"type": "Int64"
								},
								"Status": {
									"value": "Opened",
									"type": "String"
								},
								"Target": {
									"value": "DW.FactKPI",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "supplydatastore_server",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "GetBatchNumber",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Create New Batch",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT Max(pkiBatch) as MaxBatch FROM  AU.Batch",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dboTestTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Dev"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-02T10:03:40Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DFFactKPI_ETL2')]",
				"[concat(variables('factoryId'), '/linkedServices/supplydatastore_server')]",
				"[concat(variables('factoryId'), '/datasets/dboTestTable1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FactKPI_ETL2_copy2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "FactKPIStaging Flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DFFactKPI_ETL2_TEST",
								"type": "DataFlowReference",
								"parameters": {
									"BatchNumber": "toLong(0)"
								},
								"datasetParameters": {
									"StagingTable": {},
									"SourceIDs": {},
									"FactLookup": {},
									"MetricLookup": {},
									"SIteLookup": {},
									"LocationLookup": {},
									"TimeLineLookup": {},
									"PackLineLookup": {},
									"BrewhouseLookup": {},
									"FactCopy": {},
									"UpdateFact2": {},
									"UpdateFact1": {},
									"InsertFactD": {},
									"SiteLookupCache": {},
									"MetricLookupCache": {},
									"LocationCache": {},
									"TimeLineCache": {},
									"PackLineCache": {},
									"BrewhouseCache": {},
									"InsertFactWM": {},
									"UpdateTracker1": {},
									"UpdateTracker2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "InsertFacts",
						"description": "Insert facts from the fact staging table",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "FactKPIStaging Flow",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[DW].[spInsertFacts]"
						},
						"linkedServiceName": {
							"referenceName": "supplydatastore_server",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Complete"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-02T10:03:41Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DFFactKPI_ETL2_TEST')]",
				"[concat(variables('factoryId'), '/linkedServices/supplydatastore_server')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FactKPI_ETL_copy1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "ETL1 and 2 combined",
				"activities": [
					{
						"name": "Facts ETL2",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Facts ETL1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DFFactKPI_ETL2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"StagingTable": {},
									"SourceIDs": {},
									"FactLookup": {},
									"MetricLookup": {},
									"SIteLookup": {},
									"LocationLookup": {},
									"TimeLineLookup": {},
									"PackLineLookup": {},
									"BrewhouseLookup": {},
									"FactCopy": {},
									"UpdateFact2": {},
									"UpdateFact1": {},
									"InsertFactD": {},
									"SiteLookupCache": {},
									"MetricLookupCache": {},
									"LocationCache": {},
									"TimeLineCache": {},
									"PackLineCache": {},
									"BrewhouseCache": {},
									"InsertFactWM": {},
									"UpdateTracker1": {},
									"UpdateTracker2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Insert New Facts",
						"description": "Insert facts from the fact staging table",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Facts ETL2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[DW].[spInsertFacts]"
						},
						"linkedServiceName": {
							"referenceName": "supplydatastore_server",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Facts ETL1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DFFactKPI_ETL1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SDLeversOut2": {},
									"vwDateAdjustLookup2": {},
									"snkDateAdjust2": {},
									"StagingSink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Calc Derived Measures",
						"description": "Reset Measure Staging and calculated the derived measures",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Insert New Facts",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Test",
								"value": "123"
							}
						],
						"typeProperties": {
							"storedProcedureName": "[[CA].[spCalc_SD_HeadlineMeasures]"
						},
						"linkedServiceName": {
							"referenceName": "supplydatastore_server",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Reset Measures",
						"description": "Delete measures from FactKPI",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Calc Derived Measures",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[CA].[spResetMeasures]"
						},
						"linkedServiceName": {
							"referenceName": "supplydatastore_server",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Insert Measures and Weights",
						"description": "Insert contents of Measure Staging to FactKPI",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Reset Measures",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[CA].[spInsertMeasures]"
						},
						"linkedServiceName": {
							"referenceName": "supplydatastore_server",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LogExtractDate",
						"description": "Store source date of latest as a basis for  the incremental load.",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Insert Measures and Weights",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[AU].[spSetODSDateTime]"
						},
						"linkedServiceName": {
							"referenceName": "supplydatastore_server",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"LoadBatchP": {
						"type": "string",
						"defaultValue": "'0'"
					}
				},
				"folder": {
					"name": "Complete"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-02T10:03:40Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DFFactKPI_ETL2')]",
				"[concat(variables('factoryId'), '/linkedServices/supplydatastore_server')]",
				"[concat(variables('factoryId'), '/dataflows/DFFactKPI_ETL1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FactKPI_Measures')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Recalculate the measures",
				"activities": [
					{
						"name": "Calc Derived Measures",
						"description": "Reset Measure Staging and calculated the derived measures",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Test",
								"value": "123"
							}
						],
						"typeProperties": {
							"storedProcedureName": "[[CA].[spCalc_SD_HeadlineMeasures]"
						},
						"linkedServiceName": {
							"referenceName": "supplydatastore_server",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Reset Measures",
						"description": "Delete measures from FactKPI",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Calc Derived Measures",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[CA].[spResetMeasures]"
						},
						"linkedServiceName": {
							"referenceName": "supplydatastore_server",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Insert Measures and Weights",
						"description": "Insert contents of Measure Staging to FactKPI",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Reset Measures",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[CA].[spInsertMeasures]"
						},
						"linkedServiceName": {
							"referenceName": "supplydatastore_server",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"LoadBatchP": {
						"type": "string",
						"defaultValue": "'0'"
					}
				},
				"folder": {
					"name": "Complete"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-02T10:03:30Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/supplydatastore_server')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FactsETL1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "FactsETL1",
						"description": "Pull data from Source to Staging table",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DFFactKPI_ETL1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SDLeversOut2": {},
									"vwDateAdjustLookup2": {},
									"snkDateAdjust2": {},
									"StagingSink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "LogExtractDate",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "FactsETL1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[AU].[spSetODSDateTime]"
						},
						"linkedServiceName": {
							"referenceName": "supplydatastore_server",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"LoadBatchP": {
						"type": "string",
						"defaultValue": "'1'"
					}
				},
				"folder": {
					"name": "Complete"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-02T10:03:33Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DFFactKPI_ETL1')]",
				"[concat(variables('factoryId'), '/linkedServices/supplydatastore_server')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FactsETL1_copy1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "FactsETL1",
						"description": "Pull data from Source to Staging table",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DFFactKPI_ETL1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SDLeversOut2": {},
									"vwDateAdjustLookup2": {},
									"snkDateAdjust2": {},
									"StagingSink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"LoadBatchP": {
						"type": "string",
						"defaultValue": "'1'"
					}
				},
				"folder": {
					"name": "Complete"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-02T10:03:34Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DFFactKPI_ETL1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TargetsETL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "ETL1 - Move targets from staging to DW table; ETL2 - Copy tp fact file",
				"activities": [
					{
						"name": "DWTargetsETL2",
						"description": "Move targets from staging to DW table",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Targets_ETL1 2020",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "TargetsETL2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"ODSTargets": {},
									"REFTargetMapping": {},
									"REFSite": {},
									"REFMonth": {},
									"REFYear": {},
									"DWTargets": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Targets_ETL1 2021",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Truncate Target Staging",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureFileStorageReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Concatenate",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Concatenate",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "BU Region",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "BU Region",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Country",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Country",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Plant",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Plant",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Plt Code ",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Plt Code",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Fin Year",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Fin Year",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Month",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Month",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "MTD/YTD",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "MTD/YTD",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Version",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Version",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "KPI Name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "KPI Name",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Target",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Target",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "TargetSource_2021",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ODS_TargetStaging",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Targets_ETL1 2020",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Targets_ETL1 2021",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureFileStorageReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Concatenate",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Concatenate",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "BU Region",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "BU Region",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "BU Region 2",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "BU Region 2",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Country",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Country",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Plant",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Plant",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Plt Code ",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Plt Code",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Fin Year",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Fin Year",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Month",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Month",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "MTD/YTD",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "MTD/YTD",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Version",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Version",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "KPI Name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "KPI Name",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Target",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Target",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "TargetSource_2020",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ODS_TargetStaging",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Truncate Target Staging",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[ODS].[spTruncateTargetStaging]"
						},
						"linkedServiceName": {
							"referenceName": "supplydatastore_server",
							"type": "LinkedServiceReference"
						}
					}
				],
				"concurrency": 1,
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Complete"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-02T10:03:34Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/TargetsETL2')]",
				"[concat(variables('factoryId'), '/datasets/TargetSource_2021')]",
				"[concat(variables('factoryId'), '/datasets/ODS_TargetStaging')]",
				"[concat(variables('factoryId'), '/datasets/TargetSource_2020')]",
				"[concat(variables('factoryId'), '/linkedServices/supplydatastore_server')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TargetsETL1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy Targets Source",
						"description": "Testing GIT",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureFileStorageReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Concatenate",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Concatenate",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "BU Region",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "BU Region",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Country",
											"type": "String"
										},
										"sink": {
											"name": "Country",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Plant",
											"type": "String"
										},
										"sink": {
											"name": "Plant",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Plt Code ",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Plt Code",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Fin Year",
											"type": "String"
										},
										"sink": {
											"name": "Fin Year",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Month",
											"type": "String"
										},
										"sink": {
											"name": "Month",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "MTD/YTD",
											"type": "String"
										},
										"sink": {
											"name": "MTD/YTD",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Version",
											"type": "String"
										},
										"sink": {
											"name": "Version",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "KPI Name",
											"type": "String"
										},
										"sink": {
											"name": "KPI Name",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Target",
											"type": "String"
										},
										"sink": {
											"name": "Target",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "TargetSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "TargetStaging",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Dev"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-02T10:03:31Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/TargetSource')]",
				"[concat(variables('factoryId'), '/datasets/TargetStaging')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TargetsETL2_V1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Move targets from staging to DW table",
				"activities": [
					{
						"name": "DWTargetsETL2",
						"description": "Move targets from staging to DW table",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "TargetsETL2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"ODSTargets": {},
									"REFTargetMapping": {},
									"REFSite": {},
									"REFMonth": {},
									"REFYear": {},
									"DWTargets": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"concurrency": 1,
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Dev"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-02T10:03:34Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/TargetsETL2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Test Lookups')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DF Test Lookups",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Test Lookipups",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"LookupSite": {},
									"LookupTestSource": {},
									"LookupTestSiteSink": {},
									"LookupTestResSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Complete"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-02T10:03:36Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Test Lookipups')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TestDateCalcs')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "TestDateCalcs",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "TestDateCalcsFlow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"MonthLU": {},
									"YearLU": {},
									"SiteLU": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Dev"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-02T10:03:36Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/TestDateCalcsFlow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/plPhysChem')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Ibhayi Data",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderStoredProcedureName": "[[dbo].[PhysChemBCI_IBY]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Parameter",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Parameter",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "ParameterCode",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "ParameterCode",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Brand",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Brand",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "KPI",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "KPI",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "ProcessGroup",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "ProcessGroup",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "ProcessGroupGlobal",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "ProcessGroupGlobal",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "ProcessArea",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "ProcessArea",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "VALUE",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "VALUE",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "TARGET",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "TARGET",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "EnteredDateTime",
											"type": "DateTimeOffset",
											"physicalType": "datetimeoffset"
										},
										"sink": {
											"name": "EnteredDateTime",
											"type": "DateTimeOffset",
											"physicalType": "datetimeoffset"
										}
									},
									{
										"source": {
											"name": "SampleDateTime",
											"type": "DateTimeOffset",
											"physicalType": "datetimeoffset"
										},
										"sink": {
											"name": "SampleDateTime",
											"type": "DateTimeOffset",
											"physicalType": "datetimeoffset"
										}
									},
									{
										"source": {
											"name": "DueDateTime",
											"type": "DateTime",
											"physicalType": "datetime2"
										},
										"sink": {
											"name": "DueDateTime",
											"type": "DateTimeOffset",
											"physicalType": "datetimeoffset"
										}
									},
									{
										"source": {
											"name": "ParameterType",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "ParameterType",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "SpecStatus",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "SpecStatus",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "SiteID",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "SiteID",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "dsPhysChem_IBY",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "sPhysChem",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Alrode Data",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Ibhayi Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderStoredProcedureName": "[[dbo].[PhysChemBCI_ALR]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "dsPhysChem_Alrode",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "sPhyshemALR",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Polokwane Data",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Alrode Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderStoredProcedureName": "[[dbo].[PhysChemBCI_POL]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "dsPhysChemPOL",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "sPhysChemPOL",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Newlands Data",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Polokwane Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderStoredProcedureName": "[[dbo].[PhysChemBCI_NEW]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "dsPhysChemNEW",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "sPhysChemNEW",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Prospecton Data",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Newlands Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderStoredProcedureName": "[[dbo].[PhysChemBCI_PROS]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "dsPhysyChemPROS",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "sPhysChemPROS",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Chamdor Data",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Prospecton Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderStoredProcedureName": "[[dbo].[PhysChemBCI_CHAM]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "dsPhysChemCHAM",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "sPhysChemCHAM",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Rosslyn Data",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Chamdor Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderStoredProcedureName": "[[dbo].[PhysChemBCI_ROS]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "dsPhysChemROS",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "sPhysChemROS",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2021-11-08T08:54:36Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dsPhysChem_IBY')]",
				"[concat(variables('factoryId'), '/datasets/sPhysChem')]",
				"[concat(variables('factoryId'), '/datasets/dsPhysChem_Alrode')]",
				"[concat(variables('factoryId'), '/datasets/sPhyshemALR')]",
				"[concat(variables('factoryId'), '/datasets/dsPhysChemPOL')]",
				"[concat(variables('factoryId'), '/datasets/sPhysChemPOL')]",
				"[concat(variables('factoryId'), '/datasets/dsPhysChemNEW')]",
				"[concat(variables('factoryId'), '/datasets/sPhysChemNEW')]",
				"[concat(variables('factoryId'), '/datasets/dsPhysyChemPROS')]",
				"[concat(variables('factoryId'), '/datasets/sPhysChemPROS')]",
				"[concat(variables('factoryId'), '/datasets/dsPhysChemCHAM')]",
				"[concat(variables('factoryId'), '/datasets/sPhysChemCHAM')]",
				"[concat(variables('factoryId'), '/datasets/dsPhysChemROS')]",
				"[concat(variables('factoryId'), '/datasets/sPhysChemROS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/testdata')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Test data for ODS.SDLevers from TestData\n",
				"activities": [
					{
						"name": "Copy Test Data",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureFileStorageReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "truncate table ODS.SDLevers_Test",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "pkiSDLevers",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "pkiSDLevers",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"name": "BrewName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "BrewName",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DateStarting",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "DateStarting",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "LastUpdated_Source",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "LastUpdated_Source",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "TimeLine",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "TimeLine",
											"type": "String",
											"physicalType": "char"
										}
									},
									{
										"source": {
											"name": "Section",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Section",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "FlowMeasure",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "FlowMeasure",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Area",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Area",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "UOM",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "UOM",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Value",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Value",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "fkBatchID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "fkBatchID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "LastUpdated",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "LastUpdated",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "LastUpdatedBy",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "LastUpdatedBy",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "SourceLine",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SourceLine",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"name": "PeriodDate",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "PeriodDate",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "PeriodAdjust",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "PeriodAdjust",
											"type": "Int32",
											"physicalType": "int"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "TestData",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ODSTestData",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Dev"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-02T10:03:32Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/TestData')]",
				"[concat(variables('factoryId'), '/datasets/ODSTestData')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "supplydatastore_server",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Debug"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SiteName",
						"type": "varchar"
					},
					{
						"name": "SiteLookup",
						"type": "varchar"
					},
					{
						"name": "fkSite",
						"type": "bigint",
						"precision": 19
					}
				],
				"typeProperties": {
					"schema": "REF",
					"table": "vwSiteLookup"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/supplydatastore_server')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BlobRead1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Test read from data store",
				"linkedServiceName": {
					"referenceName": "SupplyBlobStore",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Debug"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "KPI Name Mapping.xlsx",
						"container": "testdata"
					},
					"sheetIndex": 0,
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "KPI_NAME ",
						"type": "String"
					},
					{
						"name": "KPI_CODE ",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SupplyBlobStore')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DWFactKPI')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "supplydatastore_server",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Facts ETL2"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "pkiFactKPI",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "fkDate",
						"type": "date"
					},
					{
						"name": "fkSite",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "fkLocation",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "fkPackLine",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "fkBrewhouse",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "fkMetric",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "fkDomain",
						"type": "int",
						"precision": 10
					},
					{
						"name": "fkTimeLine",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Value",
						"type": "float",
						"precision": 15
					},
					{
						"name": "WeightingFactor",
						"type": "float",
						"precision": 15
					},
					{
						"name": "Target",
						"type": "float",
						"precision": 15
					},
					{
						"name": "TargetWeightingFactor",
						"type": "float",
						"precision": 15
					},
					{
						"name": "SourceLine",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "fkBatch",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "LastUpdated",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "Disable",
						"type": "bit"
					}
				],
				"typeProperties": {
					"schema": "DW",
					"table": "FactKPI"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/supplydatastore_server')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DWFactKPIRead')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "supplydatastore_server",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Fact Lookups"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "pkiFactKPI",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "fkDate",
						"type": "date"
					},
					{
						"name": "fkSite",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "fkLocation",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "fkPackLine",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "fkBrewhouse",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "fkMetric",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "fkDomain",
						"type": "int",
						"precision": 10
					},
					{
						"name": "fkTimeLine",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Value",
						"type": "float",
						"precision": 15
					},
					{
						"name": "WeightingFactor",
						"type": "float",
						"precision": 15
					},
					{
						"name": "Target",
						"type": "float",
						"precision": 15
					},
					{
						"name": "TargetWeightingFactor",
						"type": "float",
						"precision": 15
					},
					{
						"name": "SourceLine",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "fkBatch",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "LastUpdated",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "Disable",
						"type": "bit"
					}
				],
				"typeProperties": {
					"schema": "DW",
					"table": "FactKPI"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/supplydatastore_server')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DWFactKPIStaging')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "supplydatastore_server",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Facts ETL2"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "fkDate",
						"type": "date"
					},
					{
						"name": "fkSite",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "fkLocation",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "fkPackLine",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "fkBrewhouse",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "fkMetric",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "fkDomain",
						"type": "int",
						"precision": 10
					},
					{
						"name": "fkTimeLine",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Value",
						"type": "float",
						"precision": 15
					},
					{
						"name": "WeightingFactor",
						"type": "float",
						"precision": 15
					},
					{
						"name": "Target",
						"type": "float",
						"precision": 15
					},
					{
						"name": "TargetWeightingFactor",
						"type": "float",
						"precision": 15
					},
					{
						"name": "SourceLine",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "fkBatch",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "LastUpdated",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "Disable",
						"type": "bit"
					}
				],
				"typeProperties": {
					"schema": "ODS",
					"table": "FactKPIStaging"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/supplydatastore_server')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DW_Targets')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "supplydatastore_server",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Targets"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "pkiTargets",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "fkMeasure",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "fkSite",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "fkDate",
						"type": "date"
					},
					{
						"name": "fkTimeLine",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ValueMTD",
						"type": "float",
						"precision": 15
					},
					{
						"name": "ValueYTD",
						"type": "float",
						"precision": 15
					},
					{
						"name": "LastUpdated",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "DW",
					"table": "Targets"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/supplydatastore_server')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DebugOutput')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "supplydatastore_server",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Debug"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Plant",
						"type": "varchar"
					},
					{
						"name": "Fin Year",
						"type": "varchar"
					},
					{
						"name": "Month",
						"type": "varchar"
					},
					{
						"name": "MTD/YTD",
						"type": "varchar"
					},
					{
						"name": "KPI Name",
						"type": "varchar"
					},
					{
						"name": "Target",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "DebugOutput"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/supplydatastore_server')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DebugSink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "supplydatastore_server",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Fact Staging ETL1"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "pkID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "BrewName",
						"type": "varchar"
					},
					{
						"name": "DateStarting",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "LastUpdated",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "TimeLine",
						"type": "char"
					},
					{
						"name": "Section",
						"type": "varchar"
					},
					{
						"name": "FlowMeasure",
						"type": "varchar"
					},
					{
						"name": "Area",
						"type": "varchar"
					},
					{
						"name": "UOM",
						"type": "varchar"
					},
					{
						"name": "Value",
						"type": "float",
						"precision": 15
					},
					{
						"name": "Batch",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Debug"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/supplydatastore_server')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DynBackupControl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "supplydatastore_server",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Dynamic Backup"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/supplydatastore_server')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DynBackupSink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SupplyBlobStore",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Schema": {
						"type": "string",
						"defaultValue": "placeholder"
					},
					"Table": {
						"type": "string",
						"defaultValue": "placeholder"
					}
				},
				"folder": {
					"name": "Dynamic Backup"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@concat(\n   dataset().Table, \n  '-', \n  substring(convertFromUtc(utcnow(), 'South Africa Standard Time'), 0, 10), \n  '.csv'\n)",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().Schema",
							"type": "Expression"
						},
						"container": "backup"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SupplyBlobStore')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DynBackupSource')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "supplydatastore_server",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Table": {
						"type": "string",
						"defaultValue": "placeholder"
					},
					"Schema": {
						"type": "string",
						"defaultValue": "placeholder"
					}
				},
				"folder": {
					"name": "Dynamic Backup"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().Schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().Table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/supplydatastore_server')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FactETL0')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "supplydatastore_server",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Fact Staging ETL1"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "pkiSDLevers",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "BrewName",
						"type": "varchar"
					},
					{
						"name": "DateStarting",
						"type": "date"
					},
					{
						"name": "LastUpdated_Source",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "TimeLine",
						"type": "char"
					},
					{
						"name": "Section",
						"type": "varchar"
					},
					{
						"name": "FlowMeasure",
						"type": "varchar"
					},
					{
						"name": "Area",
						"type": "varchar"
					},
					{
						"name": "UOM",
						"type": "varchar"
					},
					{
						"name": "Value",
						"type": "float",
						"precision": 15
					},
					{
						"name": "LastUpdated",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "SourceLine",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "PeriodDate",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "ODS",
					"table": "SDLevers_ETL0"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/supplydatastore_server')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FactKPIStaging')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "supplydatastore_server",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Facts ETL2"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "fkDate",
						"type": "date"
					},
					{
						"name": "fkSite",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "fkLocation",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "fkPackLine",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "fkBrewhouse",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "fkMetric",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "fkDomain",
						"type": "int",
						"precision": 10
					},
					{
						"name": "fkTimeLine",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Value",
						"type": "float",
						"precision": 15
					},
					{
						"name": "WeightingFactor",
						"type": "float",
						"precision": 15
					},
					{
						"name": "Target",
						"type": "float",
						"precision": 15
					},
					{
						"name": "TargetWeightingFactor",
						"type": "float",
						"precision": 15
					},
					{
						"name": "SourceLine",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "fkBatch",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "LastUpdated",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "Disable",
						"type": "bit"
					}
				],
				"typeProperties": {
					"schema": "ODS",
					"table": "FactKPIStaging"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/supplydatastore_server')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FactUpdateTracker')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "supplydatastore_server",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "pkiFactKPI",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "LastUpdated",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "Value",
						"type": "float",
						"precision": 15
					},
					{
						"name": "SourceLine",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "DataSource",
						"type": "varchar"
					},
					{
						"name": "Updated",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "ODS",
					"table": "FactUpdates"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/supplydatastore_server')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GenericDataStore')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "supplydatastore_server",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/supplydatastore_server')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GetLastUpdate')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Retrieve last batch timestamp",
				"linkedServiceName": {
					"referenceName": "supplydatastore_server",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "IntegratedLoad"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "pkiAuditLog",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "fkBatch",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "LogDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "LogMessage",
						"type": "varchar"
					},
					{
						"name": "Status",
						"type": "nchar"
					}
				],
				"typeProperties": {
					"schema": "AU",
					"table": "AuditLog"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/supplydatastore_server')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/KPILookup')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "supplydatastore_server",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Debug"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "KPI_READ",
						"type": "varchar"
					},
					{
						"name": "KPI_NAME",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "KPILookup"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/supplydatastore_server')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LookupSite')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "supplydatastore_server",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SiteName",
						"type": "varchar"
					},
					{
						"name": "SiteLookup",
						"type": "varchar"
					},
					{
						"name": "fkSite",
						"type": "bigint",
						"precision": 19
					}
				],
				"typeProperties": {
					"schema": "REF",
					"table": "vwSiteLookup"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/supplydatastore_server')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LookupTestResSink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "supplydatastore_server",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "BrewName",
						"type": "varchar"
					},
					{
						"name": "TimeLine",
						"type": "varchar"
					},
					{
						"name": "FlowMeasure",
						"type": "varchar"
					},
					{
						"name": "fkSite",
						"type": "bigint",
						"precision": 19
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "aaTestLookup"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/supplydatastore_server')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LookupTestSourceDS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "supplydatastore_server",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "BrewName",
						"type": "varchar"
					},
					{
						"name": "DateStarting",
						"type": "date"
					},
					{
						"name": "TimeLine",
						"type": "varchar"
					},
					{
						"name": "FlowMeasure",
						"type": "varchar"
					},
					{
						"name": "Section",
						"type": "varchar"
					},
					{
						"name": "Area",
						"type": "varchar"
					},
					{
						"name": "Value",
						"type": "float",
						"precision": 15
					},
					{
						"name": "Line",
						"type": "varchar"
					},
					{
						"name": "Brewhouse",
						"type": "varchar"
					},
					{
						"name": "MetricName",
						"type": "varchar"
					},
					{
						"name": "PeriodDate",
						"type": "date"
					},
					{
						"name": "LastUpdated",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "pkiSDLevers",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "fkBatchID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SourceLine",
						"type": "bigint",
						"precision": 19
					}
				],
				"typeProperties": {
					"schema": "ODS",
					"table": "vwSDLevers"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/supplydatastore_server')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MonthendPlantRef')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ReferenceData",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Reference Data"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "PLANT_NAME",
					"location": {
						"type": "AzureFileStorageLocation",
						"fileName": "MasterSitesRegions.xlsx"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ReferenceData')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ODSStaging2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Sink for ETL1",
				"linkedServiceName": {
					"referenceName": "supplydatastore_server",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Fact Staging ETL1"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "pkiSDLevers",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "BrewName",
						"type": "varchar"
					},
					{
						"name": "DateStarting",
						"type": "date"
					},
					{
						"name": "LastUpdated_Source",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "TimeLine",
						"type": "char"
					},
					{
						"name": "Section",
						"type": "varchar"
					},
					{
						"name": "FlowMeasure",
						"type": "varchar"
					},
					{
						"name": "Area",
						"type": "varchar"
					},
					{
						"name": "UOM",
						"type": "varchar"
					},
					{
						"name": "Value",
						"type": "float",
						"precision": 15
					},
					{
						"name": "fkBatchID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "LastUpdated",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "LastUpdatedBy",
						"type": "varchar"
					},
					{
						"name": "SourceLine",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "PeriodDate",
						"type": "date"
					},
					{
						"name": "PeriodAdjust",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "ODS",
					"table": "SDLevers"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/supplydatastore_server')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ODSTestData')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "supplydatastore_server",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Debug"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "pkiSDLevers",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "BrewName",
						"type": "varchar"
					},
					{
						"name": "DateStarting",
						"type": "date"
					},
					{
						"name": "LastUpdated_Source",
						"type": "date"
					},
					{
						"name": "TimeLine",
						"type": "char"
					},
					{
						"name": "Section",
						"type": "varchar"
					},
					{
						"name": "FlowMeasure",
						"type": "varchar"
					},
					{
						"name": "Area",
						"type": "varchar"
					},
					{
						"name": "UOM",
						"type": "varchar"
					},
					{
						"name": "Value",
						"type": "float",
						"precision": 15
					},
					{
						"name": "fkBatchID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "LastUpdated",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "LastUpdatedBy",
						"type": "varchar"
					},
					{
						"name": "SourceLine",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "PeriodDate",
						"type": "date"
					},
					{
						"name": "PeriodAdjust",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "ODS",
					"table": "SDLevers_Test"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/supplydatastore_server')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ODS_SDLevers')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "supplydatastore_server",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Facts ETL2"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "BrewName",
						"type": "varchar"
					},
					{
						"name": "DateStarting",
						"type": "date"
					},
					{
						"name": "TimeLine",
						"type": "varchar"
					},
					{
						"name": "FlowMeasure",
						"type": "varchar"
					},
					{
						"name": "Section",
						"type": "varchar"
					},
					{
						"name": "Area",
						"type": "varchar"
					},
					{
						"name": "Value",
						"type": "float",
						"precision": 15
					},
					{
						"name": "Line",
						"type": "varchar"
					},
					{
						"name": "Brewhouse",
						"type": "varchar"
					},
					{
						"name": "MetricName",
						"type": "varchar"
					},
					{
						"name": "PeriodDate",
						"type": "date"
					},
					{
						"name": "LastUpdated",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "pkiSDLevers",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "fkBatchID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SourceLine",
						"type": "bigint",
						"precision": 19
					}
				],
				"typeProperties": {
					"schema": "ODS",
					"table": "vwSDLevers"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/supplydatastore_server')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ODS_TargetStaging')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "supplydatastore_server",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Targets"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "pkiTargetStaging",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "Concatenate",
						"type": "varchar"
					},
					{
						"name": "BU Region",
						"type": "varchar"
					},
					{
						"name": "BU Region 2",
						"type": "varchar"
					},
					{
						"name": "BURegion",
						"type": "varchar"
					},
					{
						"name": "Country",
						"type": "varchar"
					},
					{
						"name": "Plant",
						"type": "varchar"
					},
					{
						"name": "Plt Code",
						"type": "varchar"
					},
					{
						"name": "Fin Year",
						"type": "varchar"
					},
					{
						"name": "Month",
						"type": "varchar"
					},
					{
						"name": "MTD/YTD",
						"type": "varchar"
					},
					{
						"name": "Version",
						"type": "varchar"
					},
					{
						"name": "KPI Name",
						"type": "varchar"
					},
					{
						"name": "Target",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "ODS",
					"table": "TargetStaging"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/supplydatastore_server')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PackLanding')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "supplydatastore_server",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Packaging Efficiency ETL"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "pkID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "DateEnding",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "SiteRef",
						"type": "varchar"
					},
					{
						"name": "Timeline",
						"type": "varchar"
					},
					{
						"name": "NameL1",
						"type": "varchar"
					},
					{
						"name": "NameL2",
						"type": "varchar"
					},
					{
						"name": "NameL3",
						"type": "varchar"
					},
					{
						"name": "NameL4",
						"type": "varchar"
					},
					{
						"name": "NameL5",
						"type": "varchar"
					},
					{
						"name": "CatName",
						"type": "varchar"
					},
					{
						"name": "CatDescription",
						"type": "varchar"
					},
					{
						"name": "Sort",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Summary",
						"type": "varchar"
					},
					{
						"name": "Value",
						"type": "float",
						"precision": 15
					},
					{
						"name": "fkBatch",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "LastUpdated",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "ODS",
					"table": "PackStaging"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/supplydatastore_server')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/REF_BrewhouseLookup')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "supplydatastore_server",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Fact Lookups"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "pkiBrewhouse",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "fkSite",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "BrewhouseName",
						"type": "varchar"
					},
					{
						"name": "CheckCount",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "REF",
					"table": "vwBrewhouseLookup"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/supplydatastore_server')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/REF_FactLookup')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "supplydatastore_server",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Fact Lookups"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "pkiFactKPI",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "fkDate",
						"type": "date"
					},
					{
						"name": "BrewName",
						"type": "varchar"
					},
					{
						"name": "TimeLine",
						"type": "varchar"
					},
					{
						"name": "Subdivision",
						"type": "varchar"
					},
					{
						"name": "Line",
						"type": "varchar"
					},
					{
						"name": "Brewhouse",
						"type": "varchar"
					},
					{
						"name": "LocationLookup",
						"type": "varchar"
					},
					{
						"name": "MetricName",
						"type": "varchar"
					},
					{
						"name": "SourceLine",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "LastUpdated",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "ODS",
					"table": "vwFactlookup_WMTD"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/supplydatastore_server')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/REF_LocationLookup')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "supplydatastore_server",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Fact Lookups"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "pkiLocation",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "Division",
						"type": "varchar"
					},
					{
						"name": "Subdivision",
						"type": "varchar"
					},
					{
						"name": "Line",
						"type": "varchar"
					},
					{
						"name": "Brewhouse",
						"type": "varchar"
					},
					{
						"name": "LocationLookup",
						"type": "varchar"
					},
					{
						"name": "CheckCount",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "REF",
					"table": "vwLocationLookup"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/supplydatastore_server')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/REF_MetricLookup')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "supplydatastore_server",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Fact Lookups"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "pkiMetric",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "MetricLU",
						"type": "varchar"
					},
					{
						"name": "CheckCount",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "REF",
					"table": "vwMetricLookup"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/supplydatastore_server')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/REF_Month')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "supplydatastore_server",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Target Lookups"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Name",
						"type": "varchar"
					},
					{
						"name": "MonthN",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "REF",
					"table": "vwMonthLookup"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/supplydatastore_server')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/REF_PackLineLookup')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "supplydatastore_server",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Fact Lookups"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "pkiPackLine",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "fkSite",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "LineName",
						"type": "varchar"
					},
					{
						"name": "CheckCount",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "REF",
					"table": "vwPackLineLookup"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/supplydatastore_server')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/REF_SiteLookup')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "supplydatastore_server",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Target Lookups"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SiteName",
						"type": "varchar"
					},
					{
						"name": "SiteLookup",
						"type": "varchar"
					},
					{
						"name": "fkSite",
						"type": "bigint",
						"precision": 19
					}
				],
				"typeProperties": {
					"schema": "REF",
					"table": "vwSiteLookup"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/supplydatastore_server')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/REF_SiteLookup2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Duplicate of the site lookup for the targets",
				"linkedServiceName": {
					"referenceName": "supplydatastore_server",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Fact Lookups"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SiteName",
						"type": "varchar"
					},
					{
						"name": "SiteLookup",
						"type": "varchar"
					},
					{
						"name": "fkSite",
						"type": "bigint",
						"precision": 19
					}
				],
				"typeProperties": {
					"schema": "REF",
					"table": "vwSiteLookup"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/supplydatastore_server')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/REF_TargetMapping')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "supplydatastore_server",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Target Lookups"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "pkiTargetMapping",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "TargetSourceName",
						"type": "varchar"
					},
					{
						"name": "MeasureName",
						"type": "varchar"
					},
					{
						"name": "fkMeasure",
						"type": "bigint",
						"precision": 19
					}
				],
				"typeProperties": {
					"schema": "REF",
					"table": "TargetMapping"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/supplydatastore_server')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/REF_TimeLineLookup')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "supplydatastore_server",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Fact Lookups"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "pkiTimeLine",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TimeLine",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "REF",
					"table": "vwTimelineLookup"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/supplydatastore_server')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/REF_Year')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "supplydatastore_server",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Target Lookups"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "FYear",
						"type": "varchar"
					},
					{
						"name": "NYear",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "REF",
					"table": "vwYearLookup"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/supplydatastore_server')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SDLeversOut')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "supplydatastore_server",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Fact Staging ETL1"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "pkID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "BrewName",
						"type": "varchar"
					},
					{
						"name": "DateStarting",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "LastUpdated",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "TimeLine",
						"type": "char"
					},
					{
						"name": "Section",
						"type": "varchar"
					},
					{
						"name": "FlowMeasure",
						"type": "varchar"
					},
					{
						"name": "Area",
						"type": "varchar"
					},
					{
						"name": "UOM",
						"type": "varchar"
					},
					{
						"name": "Value",
						"type": "float",
						"precision": 15
					},
					{
						"name": "Batch",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "SD_Levers_Output"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/supplydatastore_server')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SDLeversOut2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "supplydatastore_server",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Fact Staging ETL1"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "BrewName",
						"type": "varchar"
					},
					{
						"name": "DateStarting",
						"type": "date"
					},
					{
						"name": "LastUpdated_Source",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "TimeLine",
						"type": "varchar"
					},
					{
						"name": "Section",
						"type": "varchar"
					},
					{
						"name": "FlowMeasure",
						"type": "varchar"
					},
					{
						"name": "Area",
						"type": "varchar"
					},
					{
						"name": "UOM",
						"type": "varchar"
					},
					{
						"name": "Value",
						"type": "float",
						"precision": 15
					},
					{
						"name": "LastUpdated",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "SourceLine",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "PeriodDate",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "ODS",
					"table": "vwSD_Levers_ETL0"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/supplydatastore_server')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceIDLookup')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "supplydatastore_server",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Fact Lookups"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "pkiFactKPI",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "SourceLine",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "LastUpdated",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "REF",
					"table": "vwSourceIDLookup"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/supplydatastore_server')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TargetSource')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SupplyFiles",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Sheet1",
					"location": {
						"type": "AzureFileStorageLocation",
						"fileName": "C21 Targets.xlsx",
						"folderPath": "InUse"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "Concatenate",
						"type": "String"
					},
					{
						"name": "BU Region",
						"type": "String"
					},
					{
						"name": "Country",
						"type": "String"
					},
					{
						"name": "Plant",
						"type": "String"
					},
					{
						"name": "Plt Code ",
						"type": "String"
					},
					{
						"name": "Fin Year",
						"type": "String"
					},
					{
						"name": "Month",
						"type": "String"
					},
					{
						"name": "MTD/YTD",
						"type": "String"
					},
					{
						"name": "Version",
						"type": "String"
					},
					{
						"name": "KPI Name",
						"type": "String"
					},
					{
						"name": "Target",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SupplyFiles')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TargetSource_2020')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "TargetSource",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Targets"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"location": {
						"type": "AzureFileStorageLocation",
						"fileName": "C20 Targets.xlsx",
						"folderPath": "InUse"
					},
					"sheetIndex": 0,
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/TargetSource')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TargetSource_2021')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "TargetSource",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Targets"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Sheet1",
					"location": {
						"type": "AzureFileStorageLocation",
						"fileName": "C21 Targets.xlsx",
						"folderPath": "InUse"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/TargetSource')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TargetStaging')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DataStore",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "pkiTargetStaging",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "Concatenate",
						"type": "varchar"
					},
					{
						"name": "BU Region",
						"type": "varchar"
					},
					{
						"name": "BU Region 2",
						"type": "varchar"
					},
					{
						"name": "BURegion",
						"type": "varchar"
					},
					{
						"name": "Country",
						"type": "varchar"
					},
					{
						"name": "Plant",
						"type": "varchar"
					},
					{
						"name": "Plt Code",
						"type": "varchar"
					},
					{
						"name": "Fin Year",
						"type": "varchar"
					},
					{
						"name": "Month",
						"type": "varchar"
					},
					{
						"name": "MTD/YTD",
						"type": "varchar"
					},
					{
						"name": "Version",
						"type": "varchar"
					},
					{
						"name": "KPI Name",
						"type": "varchar"
					},
					{
						"name": "Target",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "ODS",
					"table": "TargetStaging"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DataStore')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TestData')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SupplyFiles",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Debug"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Sheet2",
					"location": {
						"type": "AzureFileStorageLocation",
						"fileName": "TestData.xlsx",
						"folderPath": "Dev"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SupplyFiles')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TestIRCopySink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SupplyBlobStore",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Test"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "testdata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SupplyBlobStore')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dboTestTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "supplydatastore_server",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Debug"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "pki",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "FinYear",
						"type": "varchar"
					},
					{
						"name": "Month",
						"type": "varchar"
					},
					{
						"name": "fkDate",
						"type": "date"
					},
					{
						"name": "fkDateTime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "Site",
						"type": "varchar"
					},
					{
						"name": "fkSite",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "fkTimeLine",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "TestTable1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/supplydatastore_server')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dboTestTable2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "supplydatastore_server",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Debug"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "pki",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "FinYear",
						"type": "varchar"
					},
					{
						"name": "Month",
						"type": "varchar"
					},
					{
						"name": "fkDate",
						"type": "date"
					},
					{
						"name": "fkDateTime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "Site",
						"type": "varchar"
					},
					{
						"name": "fkSite",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "fkTimeLine",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "TestTable2"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/supplydatastore_server')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dsLookupMapping')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "supplydatastore_server",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Packaging Efficiency ETL"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/supplydatastore_server')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dsPhysChemCHAM')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "PhysChem",
					"type": "LinkedServiceReference",
					"parameters": {
						"ServerName": "10.111.240.116"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/PhysChem')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dsPhysChemNEW')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "PhysChem",
					"type": "LinkedServiceReference",
					"parameters": {
						"ServerName": "10.111.240.39"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/PhysChem')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dsPhysChemPOL')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "PhysChem",
					"type": "LinkedServiceReference",
					"parameters": {
						"ServerName": "10.111.240.87"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/PhysChem')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dsPhysChemROS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "PhysChem",
					"type": "LinkedServiceReference",
					"parameters": {
						"ServerName": "10.111.240.139"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/PhysChem')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dsPhysChem_Alrode')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "PhysChem",
					"type": "LinkedServiceReference",
					"parameters": {
						"ServerName": "10.111.240.13"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/PhysChem')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dsPhysChem_IBY')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "PhysChem",
					"type": "LinkedServiceReference",
					"parameters": {
						"ServerName": "10.111.240.196"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/PhysChem')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dsPhyshChem_ALR')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "PhysChem",
					"type": "LinkedServiceReference",
					"parameters": {
						"ServerName": "10.111.240.13"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/PhysChem')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dsPhysyChemPROS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "PhysChem",
					"type": "LinkedServiceReference",
					"parameters": {
						"ServerName": "10.111.240.178"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/PhysChem')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sPhysChem')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lsPhysChemSink",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Parameter",
						"type": "nvarchar"
					},
					{
						"name": "ParameterCode",
						"type": "nvarchar"
					},
					{
						"name": "Brand",
						"type": "nvarchar"
					},
					{
						"name": "KPI",
						"type": "nvarchar"
					},
					{
						"name": "ProcessGroup",
						"type": "nvarchar"
					},
					{
						"name": "ProcessGroupGlobal",
						"type": "nvarchar"
					},
					{
						"name": "ProcessArea",
						"type": "nvarchar"
					},
					{
						"name": "VALUE",
						"type": "float",
						"precision": 15
					},
					{
						"name": "TARGET",
						"type": "float",
						"precision": 15
					},
					{
						"name": "EnteredDateTime",
						"type": "datetimeoffset",
						"scale": 3
					},
					{
						"name": "SampleDateTime",
						"type": "datetimeoffset",
						"scale": 3
					},
					{
						"name": "DueDateTime",
						"type": "datetimeoffset",
						"scale": 3
					},
					{
						"name": "ParameterType",
						"type": "nvarchar"
					},
					{
						"name": "SpecStatus",
						"type": "nvarchar"
					},
					{
						"name": "SiteID",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "PhyChemIBY_Staging"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lsPhysChemSink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sPhysChemCHAM')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lsPhysChemSink",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Parameter",
						"type": "nvarchar"
					},
					{
						"name": "ParameterCode",
						"type": "nvarchar"
					},
					{
						"name": "Brand",
						"type": "nvarchar"
					},
					{
						"name": "KPI",
						"type": "nvarchar"
					},
					{
						"name": "ProcessGroup",
						"type": "nvarchar"
					},
					{
						"name": "ProcessGroupGlobal",
						"type": "nvarchar"
					},
					{
						"name": "ProcessArea",
						"type": "nvarchar"
					},
					{
						"name": "VALUE",
						"type": "float",
						"precision": 15
					},
					{
						"name": "TARGET",
						"type": "float",
						"precision": 15
					},
					{
						"name": "EnteredDateTime",
						"type": "datetimeoffset",
						"scale": 3
					},
					{
						"name": "SampleDateTime",
						"type": "datetimeoffset",
						"scale": 3
					},
					{
						"name": "DueDateTime",
						"type": "datetimeoffset",
						"scale": 3
					},
					{
						"name": "ParameterType",
						"type": "nvarchar"
					},
					{
						"name": "SpecStatus",
						"type": "nvarchar"
					},
					{
						"name": "SiteID",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "PhyChemCHAM_Staging"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lsPhysChemSink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sPhysChemNEW')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lsPhysChemSink",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "PhyChemNEW_Staging"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lsPhysChemSink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sPhysChemPOL')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lsPhysChemSink",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "PhyChemPOL_Staging"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lsPhysChemSink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sPhysChemPROS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lsPhysChemSink",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "PhyChemPROS_Staging"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lsPhysChemSink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sPhysChemROS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lsPhysChemSink",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "PhyChemROS_Staging"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lsPhysChemSink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sPhyshemALR')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lsPhysChemSink",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Parameter",
						"type": "nvarchar"
					},
					{
						"name": "ParameterCode",
						"type": "nvarchar"
					},
					{
						"name": "Brand",
						"type": "nvarchar"
					},
					{
						"name": "KPI",
						"type": "nvarchar"
					},
					{
						"name": "ProcessGroup",
						"type": "nvarchar"
					},
					{
						"name": "ProcessGroupGlobal",
						"type": "nvarchar"
					},
					{
						"name": "ProcessArea",
						"type": "nvarchar"
					},
					{
						"name": "VALUE",
						"type": "float",
						"precision": 15
					},
					{
						"name": "TARGET",
						"type": "float",
						"precision": 15
					},
					{
						"name": "EnteredDateTime",
						"type": "datetimeoffset",
						"scale": 3
					},
					{
						"name": "SampleDateTime",
						"type": "datetimeoffset",
						"scale": 3
					},
					{
						"name": "DueDateTime",
						"type": "datetimeoffset",
						"scale": 3
					},
					{
						"name": "ParameterType",
						"type": "nvarchar"
					},
					{
						"name": "SpecStatus",
						"type": "nvarchar"
					},
					{
						"name": "SiteID",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "PhyChemALR_Staging"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lsPhysChemSink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/vwDateAdjustLookup')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Indicates whether week data should shift by 1 day to align ROA and SA week ends",
				"linkedServiceName": {
					"referenceName": "supplydatastore_server",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Fact Staging ETL1"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SiteName",
						"type": "varchar"
					},
					{
						"name": "DateAdjust",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "REF",
					"table": "vwDateAdjustLookup"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/supplydatastore_server')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataStore')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('DataStore_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PhysChem')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"ServerName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('PhysChem_connectionString')]"
				},
				"connectVia": {
					"referenceName": "OnPremise",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/OnPremise')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ReferenceData')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureFileStorage",
				"typeProperties": {
					"connectionString": "[parameters('ReferenceData_connectionString')]",
					"fileShare": "referencedata"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SupplyBlobStore')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('SupplyBlobStore_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SupplyFiles')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureFileStorage",
				"typeProperties": {
					"connectionString": "[parameters('SupplyFiles_connectionString')]",
					"fileShare": "testfolder"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SupplyStorage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('SupplyStorage_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TargetSource')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureFileStorage",
				"typeProperties": {
					"connectionString": "[parameters('TargetSource_connectionString')]",
					"fileShare": "targets"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/lsPhysChem')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"server": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('lsPhysChem_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/lsPhysChemSink')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('lsPhysChemSink_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/supplydatastore_server')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('supplydatastore_server_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/OnPremise')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {
					"linkedInfo": {
						"resourceId": "[parameters('OnPremise_properties_typeProperties_linkedInfo_resourceId')]",
						"authorizationType": "Rbac"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DFFactKPI_ETL1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Replacement for FactsETL-df1",
				"folder": {
					"name": "Fact DF"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SDLeversOut2",
								"type": "DatasetReference"
							},
							"name": "SDLeversOut2"
						},
						{
							"dataset": {
								"referenceName": "vwDateAdjustLookup",
								"type": "DatasetReference"
							},
							"name": "vwDateAdjustLookup2"
						}
					],
					"sinks": [
						{
							"name": "snkDateAdjust2"
						},
						{
							"dataset": {
								"referenceName": "ODSStaging2",
								"type": "DatasetReference"
							},
							"name": "StagingSink2"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "SurrogateKey1"
						}
					],
					"script": "source(output(\n\t\tBrewName as string,\n\t\tDateStarting as date,\n\t\tLastUpdated_Source as timestamp,\n\t\tTimeLine as string,\n\t\tSection as string,\n\t\tFlowMeasure as string,\n\t\tArea as string,\n\t\tUOM as string,\n\t\tValue as double,\n\t\tLastUpdated as timestamp,\n\t\tSourceLine as long,\n\t\tPeriodDate as date\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: (\"SELECT BrewName,DateStarting,LastUpdated_Source,TimeLine,Section,FlowMeasure,Area,UOM,Value,LastUpdated,SourceLine,PeriodDate FROM ODS.vwSD_Levers_ETL0\"),\n\tformat: 'query') ~> SDLeversOut2\nsource(output(\n\t\tSiteName as string,\n\t\tDateAdjust as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> vwDateAdjustLookup2\nSDLeversOut2 derive(DateAdjust = snkDateAdjust2#lookup(BrewName).DateAdjust,\n\t\tLastUpdated1 = currentTimestamp(),\n\t\tTimeLine_tr = trim(TimeLine),\n\t\tfkBatch = toInteger(0)) ~> DerivedColumn1\nDerivedColumn1 keyGenerate(output(pkiSDLevers as long),\n\tstartAt: 1L) ~> SurrogateKey1\nvwDateAdjustLookup2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tkeys:['SiteName'],\n\tstore: 'cache',\n\tformat: 'inline',\n\toutput: false,\n\tsaveOrder: 1,\n\tmapColumn(\n\t\tSiteName,\n\t\tDateAdjust\n\t)) ~> snkDateAdjust2\nSurrogateKey1 sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tpkiSDLevers as long,\n\t\tBrewName as string,\n\t\tDateStarting as date,\n\t\tLastUpdated_Source as timestamp,\n\t\tTimeLine as string,\n\t\tSection as string,\n\t\tFlowMeasure as string,\n\t\tArea as string,\n\t\tUOM as string,\n\t\tValue as double,\n\t\tfkBatchID as integer,\n\t\tLastUpdated as timestamp,\n\t\tLastUpdatedBy as string,\n\t\tSourceLine as long,\n\t\tPeriodDate as date,\n\t\tPeriodAdjust as integer\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tdateFormat:'yyyy/MM/dd',\n\ttimestampFormat:'yyyy/MM/dd hh:mm:ss',\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tpkiSDLevers,\n\t\tBrewName,\n\t\tDateStarting,\n\t\tLastUpdated_Source,\n\t\tTimeLine,\n\t\tSection,\n\t\tFlowMeasure,\n\t\tArea,\n\t\tUOM,\n\t\tValue,\n\t\tfkBatchID = fkBatch,\n\t\tLastUpdated = LastUpdated1,\n\t\tSourceLine,\n\t\tPeriodDate,\n\t\tPeriodAdjust = DateAdjust\n\t)) ~> StagingSink2"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SDLeversOut2')]",
				"[concat(variables('factoryId'), '/datasets/vwDateAdjustLookup')]",
				"[concat(variables('factoryId'), '/datasets/ODSStaging2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DFFactKPI_ETL2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ODS_SDLevers",
								"type": "DatasetReference"
							},
							"name": "StagingTable"
						},
						{
							"dataset": {
								"referenceName": "SourceIDLookup",
								"type": "DatasetReference"
							},
							"name": "SourceIDs"
						},
						{
							"dataset": {
								"referenceName": "REF_FactLookup",
								"type": "DatasetReference"
							},
							"name": "FactLookup"
						},
						{
							"dataset": {
								"referenceName": "REF_MetricLookup",
								"type": "DatasetReference"
							},
							"name": "MetricLookup"
						},
						{
							"dataset": {
								"referenceName": "REF_SiteLookup",
								"type": "DatasetReference"
							},
							"name": "SIteLookup"
						},
						{
							"dataset": {
								"referenceName": "REF_LocationLookup",
								"type": "DatasetReference"
							},
							"name": "LocationLookup"
						},
						{
							"dataset": {
								"referenceName": "REF_TimeLineLookup",
								"type": "DatasetReference"
							},
							"name": "TimeLineLookup"
						},
						{
							"dataset": {
								"referenceName": "REF_PackLineLookup",
								"type": "DatasetReference"
							},
							"name": "PackLineLookup"
						},
						{
							"dataset": {
								"referenceName": "REF_BrewhouseLookup",
								"type": "DatasetReference"
							},
							"name": "BrewhouseLookup"
						},
						{
							"dataset": {
								"referenceName": "DWFactKPIRead",
								"type": "DatasetReference"
							},
							"name": "FactCopy"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DWFactKPI",
								"type": "DatasetReference"
							},
							"name": "UpdateFact2",
							"description": "Update DWFactKPI"
						},
						{
							"dataset": {
								"referenceName": "DWFactKPI",
								"type": "DatasetReference"
							},
							"name": "UpdateFact1",
							"description": "Update DWFactKPI"
						},
						{
							"dataset": {
								"referenceName": "DWFactKPIStaging",
								"type": "DatasetReference"
							},
							"name": "InsertFactD"
						},
						{
							"name": "SiteLookupCache"
						},
						{
							"name": "MetricLookupCache"
						},
						{
							"name": "LocationCache"
						},
						{
							"name": "TimeLineCache"
						},
						{
							"name": "PackLineCache"
						},
						{
							"name": "BrewhouseCache"
						},
						{
							"dataset": {
								"referenceName": "DWFactKPIStaging",
								"type": "DatasetReference"
							},
							"name": "InsertFactWM"
						},
						{
							"dataset": {
								"referenceName": "FactUpdateTracker",
								"type": "DatasetReference"
							},
							"name": "UpdateTracker1"
						},
						{
							"dataset": {
								"referenceName": "FactUpdateTracker",
								"type": "DatasetReference"
							},
							"name": "UpdateTracker2"
						}
					],
					"transformations": [
						{
							"name": "UpdateRecords",
							"description": "Input rows that match on SourceLine"
						},
						{
							"name": "ExistingHash",
							"description": "Hash of characterising fields to match WTD and MTD elements"
						},
						{
							"name": "MarkUpdate1",
							"description": "Update the value and lastupdated date"
						},
						{
							"name": "InputHash",
							"description": "Hash of elements to identify similar records"
						},
						{
							"name": "NewRecords",
							"description": "Input rows that do not match on SourceLine\nNOTE Exists does not join the subquery"
						},
						{
							"name": "SplitTimeLines",
							"description": "Split MTD and WTD records from DAY records"
						},
						{
							"name": "MarkUpdate2",
							"description": "Update the value, sourceline and lastupdated date"
						},
						{
							"name": "Lookup1"
						},
						{
							"name": "Select1",
							"description": "pki and new value and lastupdated"
						},
						{
							"name": "Select2",
							"description": "PKI, and new sourceline, lastupdated and value"
						},
						{
							"name": "KeyFromSourceline",
							"description": "Look up the fact pki from the source line for matching source lines"
						},
						{
							"name": "LookupCurrent",
							"description": "Lookup primary key for matched record from sourceline"
						},
						{
							"name": "LookupKeys"
						},
						{
							"name": "LocLookup"
						},
						{
							"name": "PackLineKey"
						},
						{
							"name": "BrewhouseKey"
						},
						{
							"name": "MarkInsert"
						},
						{
							"name": "ConditionalSplit1"
						},
						{
							"name": "Select3"
						},
						{
							"name": "LookupKeys2"
						},
						{
							"name": "MarkInsert1"
						},
						{
							"name": "Select4"
						},
						{
							"name": "Select5"
						},
						{
							"name": "Select6"
						},
						{
							"name": "UpdateTracker1Metadata"
						},
						{
							"name": "UpdateTracker2Metadata"
						},
						{
							"name": "SelectLUSite"
						},
						{
							"name": "SelectLUMetric"
						},
						{
							"name": "SelectLULocation"
						},
						{
							"name": "SelectLUTimeLine"
						},
						{
							"name": "SelectLUPackLine"
						},
						{
							"name": "SelectLUBrewhouse"
						}
					],
					"script": "parameters{\n\tBatchNumber as long (toLong(0))\n}\nsource(output(\n\t\tBrewName as string,\n\t\tDateStarting as date,\n\t\tTimeLine as string,\n\t\tFlowMeasure as string,\n\t\tSection as string,\n\t\tArea as string,\n\t\tValue as double,\n\t\tLine as string,\n\t\tBrewhouse as string,\n\t\tMetricName as string,\n\t\tPeriodDate as date,\n\t\tLastUpdated as timestamp,\n\t\tpkiSDLevers as long,\n\t\tfkBatchID as integer,\n\t\tSourceLine as long\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> StagingTable\nsource(output(\n\t\tpkiFactKPI as long,\n\t\tSourceLine as long,\n\t\tLastUpdated as timestamp\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SourceIDs\nsource(output(\n\t\tpkiFactKPI as long,\n\t\tfkDate as date,\n\t\tBrewName as string,\n\t\tTimeLine as string,\n\t\tSubdivision as string,\n\t\tLine as string,\n\t\tBrewhouse as string,\n\t\tLocationLookup as string,\n\t\tMetricName as string,\n\t\tSourceLine as long,\n\t\tLastUpdated as timestamp\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> FactLookup\nsource(output(\n\t\tpkiMetric as long,\n\t\tMetricLU as string,\n\t\tCheckCount as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> MetricLookup\nsource(output(\n\t\tSiteName as string,\n\t\tSiteLookup as string,\n\t\tfkSite as long\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SIteLookup\nsource(output(\n\t\tpkiLocation as long,\n\t\tDivision as string,\n\t\tSubdivision as string,\n\t\tLine as string,\n\t\tBrewhouse as string,\n\t\tLocationLookup as string,\n\t\tCheckCount as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> LocationLookup\nsource(output(\n\t\tpkiTimeLine as integer,\n\t\tTimeLine as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> TimeLineLookup\nsource(output(\n\t\tpkiPackLine as long,\n\t\tfkSite as long,\n\t\tLineName as string,\n\t\tCheckCount as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> PackLineLookup\nsource(output(\n\t\tpkiBrewhouse as long,\n\t\tfkSite as long,\n\t\tBrewhouseName as string,\n\t\tCheckCount as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> BrewhouseLookup\nsource(output(\n\t\tpkiFactKPI as long,\n\t\tfkDate as date,\n\t\tfkSite as long,\n\t\tfkLocation as long,\n\t\tfkPackLine as long,\n\t\tfkBrewhouse as long,\n\t\tfkMetric as long,\n\t\tfkDomain as integer,\n\t\tfkTimeLine as integer,\n\t\tValue as double,\n\t\tWeightingFactor as double,\n\t\tTarget as double,\n\t\tTargetWeightingFactor as double,\n\t\tSourceLine as long,\n\t\tfkBatch as long,\n\t\tLastUpdated as timestamp,\n\t\tDisable as boolean\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> FactCopy\nInputHash, SourceIDs exists(StagingTable@SourceLine == SourceIDs@SourceLine,\n\tnegate:false,\n\tbroadcast: 'auto')~> UpdateRecords\nFactLookup derive(hashExisting = md5(toString(fkDate), BrewName, TimeLine, Line, Brewhouse, MetricName)) ~> ExistingHash\nSelect6 alterRow(updateIf(true())) ~> MarkUpdate1\nStagingTable derive(TMTimeLine = (trim(TimeLine) == 'MTD') || (trim(TimeLine) == 'YTD'),\n\t\tInputHash = md5(toString(PeriodDate), BrewName, TimeLine, Line, Brewhouse, MetricName),\n\t\tLocLookup1 = lower(trim(Area) + trim(coalesce(Line, '')) + trim(coalesce(Brewhouse, ''))),\n\t\tLineLookup = toString(SiteLookupCache#lookup(BrewName).fkSite) + '|' + Line,\n\t\tBrewhouseLookup = toString(SiteLookupCache#lookup(BrewName).fkSite) + '|' + Brewhouse,\n\t\tfkDate = PeriodDate) ~> InputHash\nInputHash, SourceIDs exists(StagingTable@SourceLine == SourceIDs@SourceLine,\n\tnegate:true,\n\tbroadcast: 'auto')~> NewRecords\nNewRecords split(or(trim(TimeLine) == \"MTD\",  trim(TimeLine) == \"WTD\"),\n\tdisjoint: false) ~> SplitTimeLines@(MTDWTDTimeLines, DAYTimeLine)\nConditionalSplit1@FuzzyMatched alterRow(updateIf(true())) ~> MarkUpdate2\nSplitTimeLines@MTDWTDTimeLines, ExistingHash lookup(InputHash == hashExisting,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> Lookup1\nMarkUpdate1 select(mapColumn(\n\t\tpkiFactKPI,\n\t\tLastUpdated,\n\t\tValue\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Select1\nMarkUpdate2 select(mapColumn(\n\t\tpkiFactKPI,\n\t\tSourceLine,\n\t\tLastUpdated,\n\t\tValue\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Select2\nFactLookup select(mapColumn(\n\t\tpkiFactKPI,\n\t\tfkDate,\n\t\tBrewName,\n\t\tTimeLine,\n\t\tSubdivision,\n\t\tLine,\n\t\tBrewhouse,\n\t\tLocationLookup,\n\t\tMetricName,\n\t\tSourceLine,\n\t\tLastUpdated\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> KeyFromSourceline\nUpdateRecords, FactCopy lookup(StagingTable@SourceLine == FactCopy@SourceLine,\n\tmultiple: true,\n\tbroadcast: 'auto',\n\tpickup: 'any')~> LookupCurrent\nSplitTimeLines@DAYTimeLine derive(fkSite = SiteLookupCache#lookup(BrewName).fkSite,\n\t\tfkMetric = MetricLookupCache#lookup(MetricName).fkMetric,\n\t\tfkLocation = LocationCache#lookup(LocLookup1).fkLocation,\n\t\tfkTimeLine = TimeLineCache#lookup(TimeLine).fkTimeLine,\n\t\tfkPackLine = PackLineCache#lookup(LineLookup).fkPackLine,\n\t\tfkBrewhouse = BrewhouseCache#lookup(BrewhouseLookup).fkBrewhouse,\n\t\tfkDomain = 1,\n\t\tfkBatchL = toLong($BatchNumber),\n\t\tWeightingFactor = toDouble(0),\n\t\tTarget = toDouble(0),\n\t\tTargetWeightingFactor = toDouble(0),\n\t\tDisable = false()) ~> LookupKeys\nLocationLookup derive(LocLookup = lower(trim(Subdivision) + trim(coalesce(Line, '')) + trim(coalesce(Brewhouse, '')))) ~> LocLookup\nPackLineLookup derive(LineKey = toString(fkSite) + '|' + LineName) ~> PackLineKey\nBrewhouseLookup derive(BrewhouseKey = toString(fkSite) + '|' + BrewhouseName) ~> BrewhouseKey\nLookupKeys alterRow(insertIf(true())) ~> MarkInsert\nSelect3 split(InputHash == hashExisting,\n\tdisjoint: false) ~> ConditionalSplit1@(FuzzyMatched, FuzzyUnmatched)\nLookup1 select(mapColumn(\n\t\tBrewName = SplitTimeLines@MTDWTDTimeLines@BrewName,\n\t\tDateStarting,\n\t\tTimeLine = SplitTimeLines@MTDWTDTimeLines@TimeLine,\n\t\tFlowMeasure,\n\t\tSection,\n\t\tArea,\n\t\tValue,\n\t\tLine = SplitTimeLines@MTDWTDTimeLines@Line,\n\t\tBrewhouse = SplitTimeLines@MTDWTDTimeLines@Brewhouse,\n\t\tMetricName = SplitTimeLines@MTDWTDTimeLines@MetricName,\n\t\tPeriodDate,\n\t\tLastUpdated = SplitTimeLines@MTDWTDTimeLines@LastUpdated,\n\t\tfkBatchID,\n\t\tSourceLine = SplitTimeLines@MTDWTDTimeLines@SourceLine,\n\t\tInputHash,\n\t\tpkiFactKPI,\n\t\tfkDate = SplitTimeLines@MTDWTDTimeLines@fkDate,\n\t\thashExisting,\n\t\tLocLookup1,\n\t\tLineLookup,\n\t\tBrewhouseLookup\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select3\nConditionalSplit1@FuzzyUnmatched derive(fkSite = SiteLookupCache#lookup(BrewName).fkSite,\n\t\tfkMetric = MetricLookupCache#lookup(MetricName).fkMetric,\n\t\tfkLocation = LocationCache#lookup(LocLookup1).fkLocation,\n\t\tfkTimeLine = TimeLineCache#lookup(TimeLine).fkTimeLine,\n\t\tfkPackLine = PackLineCache#lookup(LineLookup).fkPackLine,\n\t\tfkBrewhouse = BrewhouseCache#lookup(BrewhouseLookup).fkBrewhouse,\n\t\tfkDomain = 1,\n\t\tfkBatchL = toLong($BatchNumber),\n\t\tWeightingFactor = toDouble(0),\n\t\tTarget = toDouble(0),\n\t\tTargetWeightingFactor = toDouble(0),\n\t\tDisable = false()) ~> LookupKeys2\nLookupKeys2 alterRow(insertIf(true())) ~> MarkInsert1\nMarkInsert1 select(mapColumn(\n\t\tfkDate,\n\t\tfkSite,\n\t\tfkLocation,\n\t\tfkPackLine,\n\t\tfkBrewhouse,\n\t\tfkMetric,\n\t\tfkDomain,\n\t\tfkTimeLine,\n\t\tValue,\n\t\tWeightingFactor,\n\t\tTarget,\n\t\tTargetWeightingFactor,\n\t\tSourceLine,\n\t\tfkBatch = fkBatchL,\n\t\tLastUpdated,\n\t\tDisable\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Select4\nMarkInsert select(mapColumn(\n\t\tfkDate,\n\t\tfkSite,\n\t\tfkLocation,\n\t\tfkPackLine,\n\t\tfkBrewhouse,\n\t\tfkMetric,\n\t\tfkDomain,\n\t\tfkTimeLine,\n\t\tValue,\n\t\tWeightingFactor,\n\t\tTarget,\n\t\tTargetWeightingFactor,\n\t\tSourceLine,\n\t\tfkBatch = fkBatchL,\n\t\tLastUpdated,\n\t\tDisable\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Select5\nLookupCurrent select(mapColumn(\n\t\tpkiFactKPI,\n\t\tfkDate = FactCopy@fkDate,\n\t\tfkSite,\n\t\tfkLocation,\n\t\tfkPackLine,\n\t\tfkBrewhouse,\n\t\tfkMetric,\n\t\tfkDomain,\n\t\tfkTimeLine,\n\t\tValue = StagingTable@Value,\n\t\tWeightingFactor,\n\t\tTarget,\n\t\tTargetWeightingFactor,\n\t\tSourceLine = FactCopy@SourceLine,\n\t\tfkBatch = fkBatchID,\n\t\tLastUpdated = StagingTable@LastUpdated,\n\t\tDisable\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Select6\nSelect1 derive(SourceLine = toLong(null()),\n\t\tDataSource = \"Day branch\",\n\t\tUpdated = fromUTC(currentUTC(), \"South Africa Standard Time\")) ~> UpdateTracker1Metadata\nSelect2 derive(DataSource = \"Week/Month branch\",\n\t\tUpdated = fromUTC(currentUTC(), \"South Africa Standard Time\")) ~> UpdateTracker2Metadata\nSIteLookup select(mapColumn(\n\t\tSiteLookup,\n\t\tfkSite\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: true) ~> SelectLUSite\nMetricLookup select(mapColumn(\n\t\tfkMetric = pkiMetric,\n\t\tMetricLU\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectLUMetric\nLocLookup select(mapColumn(\n\t\tfkLocation = pkiLocation,\n\t\tLocationLookup\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectLULocation\nTimeLineLookup select(mapColumn(\n\t\tfkTimeLine = pkiTimeLine,\n\t\tTimeLineLU = TimeLine\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectLUTimeLine\nPackLineKey select(mapColumn(\n\t\tfkPackLine = pkiPackLine,\n\t\tLineKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectLUPackLine\nBrewhouseKey select(mapColumn(\n\t\tfkBrewhouse = pkiBrewhouse,\n\t\tBrewhouseKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectLUBrewhouse\nSelect1 sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tpkiFactKPI as long,\n\t\tfkDate as date,\n\t\tfkSite as long,\n\t\tfkLocation as long,\n\t\tfkPackLine as long,\n\t\tfkBrewhouse as long,\n\t\tfkMetric as long,\n\t\tfkDomain as integer,\n\t\tfkTimeLine as integer,\n\t\tValue as double,\n\t\tWeightingFactor as double,\n\t\tTarget as double,\n\t\tTargetWeightingFactor as double,\n\t\tSourceLine as long,\n\t\tfkBatch as long,\n\t\tLastUpdated as timestamp,\n\t\tDisable as boolean\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['pkiFactKPI'],\n\tskipKeyWrites:true,\n\tformat: 'table',\n\tsaveOrder: 7,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tpkiFactKPI,\n\t\tLastUpdated,\n\t\tValue\n\t)) ~> UpdateFact2\nSelect2 sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tpkiFactKPI as long,\n\t\tfkDate as date,\n\t\tfkSite as long,\n\t\tfkLocation as long,\n\t\tfkPackLine as long,\n\t\tfkBrewhouse as long,\n\t\tfkMetric as long,\n\t\tfkDomain as integer,\n\t\tfkTimeLine as integer,\n\t\tValue as double,\n\t\tWeightingFactor as double,\n\t\tTarget as double,\n\t\tTargetWeightingFactor as double,\n\t\tSourceLine as long,\n\t\tfkBatch as long,\n\t\tLastUpdated as timestamp,\n\t\tDisable as boolean\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['pkiFactKPI'],\n\tskipKeyWrites:true,\n\tformat: 'table',\n\tsaveOrder: 6,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tpkiFactKPI,\n\t\tValue,\n\t\tSourceLine,\n\t\tLastUpdated\n\t)) ~> UpdateFact1\nSelect5 sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tfkDate as date,\n\t\tfkSite as long,\n\t\tfkLocation as long,\n\t\tfkPackLine as long,\n\t\tfkBrewhouse as long,\n\t\tfkMetric as long,\n\t\tfkDomain as integer,\n\t\tfkTimeLine as integer,\n\t\tValue as double,\n\t\tWeightingFactor as double,\n\t\tTarget as double,\n\t\tTargetWeightingFactor as double,\n\t\tSourceLine as long,\n\t\tfkBatch as long,\n\t\tLastUpdated as timestamp,\n\t\tDisable as boolean\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tsaveOrder: 4,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tfkDate,\n\t\tfkSite,\n\t\tfkLocation,\n\t\tfkPackLine,\n\t\tfkBrewhouse,\n\t\tfkMetric,\n\t\tfkDomain,\n\t\tfkTimeLine,\n\t\tValue,\n\t\tWeightingFactor,\n\t\tTarget,\n\t\tTargetWeightingFactor,\n\t\tSourceLine,\n\t\tfkBatch,\n\t\tLastUpdated,\n\t\tDisable\n\t)) ~> InsertFactD\nSelectLUSite sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tkeys:['SiteLookup'],\n\tstore: 'cache',\n\tformat: 'inline',\n\toutput: false,\n\tsaveOrder: 1,\n\tmapColumn(\n\t\tSiteLookup,\n\t\tfkSite\n\t)) ~> SiteLookupCache\nSelectLUMetric sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tkeys:['MetricLU'],\n\tstore: 'cache',\n\tformat: 'inline',\n\toutput: false,\n\tsaveOrder: 2,\n\tmapColumn(\n\t\tfkMetric,\n\t\tMetricLU\n\t)) ~> MetricLookupCache\nSelectLULocation sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tkeys:['LocationLookup'],\n\tstore: 'cache',\n\tformat: 'inline',\n\toutput: false,\n\tsaveOrder: 1,\n\tmapColumn(\n\t\tfkLocation,\n\t\tLocationLookup\n\t)) ~> LocationCache\nSelectLUTimeLine sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tkeys:['TimeLineLU'],\n\tstore: 'cache',\n\tformat: 'inline',\n\toutput: false,\n\tsaveOrder: 2,\n\tmapColumn(\n\t\tfkTimeLine,\n\t\tTimeLineLU\n\t)) ~> TimeLineCache\nSelectLUPackLine sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tkeys:['LineKey'],\n\tstore: 'cache',\n\tformat: 'inline',\n\toutput: false,\n\tsaveOrder: 2,\n\tmapColumn(\n\t\tfkPackLine,\n\t\tLineKey\n\t)) ~> PackLineCache\nSelectLUBrewhouse sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tkeys:['BrewhouseKey'],\n\tstore: 'cache',\n\tformat: 'inline',\n\toutput: false,\n\tsaveOrder: 2,\n\tmapColumn(\n\t\tfkBrewhouse,\n\t\tBrewhouseKey\n\t)) ~> BrewhouseCache\nSelect4 sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tfkDate as date,\n\t\tfkSite as long,\n\t\tfkLocation as long,\n\t\tfkPackLine as long,\n\t\tfkBrewhouse as long,\n\t\tfkMetric as long,\n\t\tfkDomain as integer,\n\t\tfkTimeLine as integer,\n\t\tValue as double,\n\t\tWeightingFactor as double,\n\t\tTarget as double,\n\t\tTargetWeightingFactor as double,\n\t\tSourceLine as long,\n\t\tfkBatch as long,\n\t\tLastUpdated as timestamp,\n\t\tDisable as boolean\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tsaveOrder: 5,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tfkDate,\n\t\tfkSite,\n\t\tfkLocation,\n\t\tfkPackLine,\n\t\tfkBrewhouse,\n\t\tfkMetric,\n\t\tfkDomain,\n\t\tfkTimeLine,\n\t\tValue,\n\t\tWeightingFactor,\n\t\tTarget,\n\t\tTargetWeightingFactor,\n\t\tSourceLine,\n\t\tfkBatch,\n\t\tLastUpdated,\n\t\tDisable\n\t)) ~> InsertFactWM\nUpdateTracker1Metadata sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tpkiFactKPI as long,\n\t\tLastUpdated as timestamp,\n\t\tValue as double,\n\t\tSourceLine as long,\n\t\tDataSource as string,\n\t\tUpdated as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tsaveOrder: 8,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tpkiFactKPI,\n\t\tLastUpdated,\n\t\tValue,\n\t\tSourceLine,\n\t\tDataSource,\n\t\tUpdated\n\t)) ~> UpdateTracker1\nUpdateTracker2Metadata sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tpkiFactKPI as long,\n\t\tLastUpdated as timestamp,\n\t\tValue as double,\n\t\tSourceLine as long,\n\t\tDataSource as string,\n\t\tUpdated as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 9,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tpkiFactKPI,\n\t\tLastUpdated,\n\t\tValue,\n\t\tSourceLine,\n\t\tDataSource,\n\t\tUpdated\n\t)) ~> UpdateTracker2"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ODS_SDLevers')]",
				"[concat(variables('factoryId'), '/datasets/SourceIDLookup')]",
				"[concat(variables('factoryId'), '/datasets/REF_FactLookup')]",
				"[concat(variables('factoryId'), '/datasets/REF_MetricLookup')]",
				"[concat(variables('factoryId'), '/datasets/REF_SiteLookup')]",
				"[concat(variables('factoryId'), '/datasets/REF_LocationLookup')]",
				"[concat(variables('factoryId'), '/datasets/REF_TimeLineLookup')]",
				"[concat(variables('factoryId'), '/datasets/REF_PackLineLookup')]",
				"[concat(variables('factoryId'), '/datasets/REF_BrewhouseLookup')]",
				"[concat(variables('factoryId'), '/datasets/DWFactKPIRead')]",
				"[concat(variables('factoryId'), '/datasets/DWFactKPI')]",
				"[concat(variables('factoryId'), '/datasets/DWFactKPIStaging')]",
				"[concat(variables('factoryId'), '/datasets/FactUpdateTracker')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DFFactKPI_ETL2_TEST')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ODS_SDLevers",
								"type": "DatasetReference"
							},
							"name": "StagingTable"
						},
						{
							"dataset": {
								"referenceName": "SourceIDLookup",
								"type": "DatasetReference"
							},
							"name": "SourceIDs"
						},
						{
							"dataset": {
								"referenceName": "REF_FactLookup",
								"type": "DatasetReference"
							},
							"name": "FactLookup"
						},
						{
							"dataset": {
								"referenceName": "REF_MetricLookup",
								"type": "DatasetReference"
							},
							"name": "MetricLookup"
						},
						{
							"dataset": {
								"referenceName": "REF_SiteLookup",
								"type": "DatasetReference"
							},
							"name": "SIteLookup"
						},
						{
							"dataset": {
								"referenceName": "REF_LocationLookup",
								"type": "DatasetReference"
							},
							"name": "LocationLookup"
						},
						{
							"dataset": {
								"referenceName": "REF_TimeLineLookup",
								"type": "DatasetReference"
							},
							"name": "TimeLineLookup"
						},
						{
							"dataset": {
								"referenceName": "REF_PackLineLookup",
								"type": "DatasetReference"
							},
							"name": "PackLineLookup"
						},
						{
							"dataset": {
								"referenceName": "REF_BrewhouseLookup",
								"type": "DatasetReference"
							},
							"name": "BrewhouseLookup"
						},
						{
							"dataset": {
								"referenceName": "DWFactKPIRead",
								"type": "DatasetReference"
							},
							"name": "FactCopy"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DWFactKPI",
								"type": "DatasetReference"
							},
							"name": "UpdateFact2",
							"description": "Update DWFactKPI"
						},
						{
							"dataset": {
								"referenceName": "DWFactKPI",
								"type": "DatasetReference"
							},
							"name": "UpdateFact1",
							"description": "Update DWFactKPI"
						},
						{
							"dataset": {
								"referenceName": "DWFactKPIStaging",
								"type": "DatasetReference"
							},
							"name": "InsertFactD"
						},
						{
							"name": "SiteLookupCache"
						},
						{
							"name": "MetricLookupCache"
						},
						{
							"name": "LocationCache"
						},
						{
							"name": "TimeLineCache"
						},
						{
							"name": "PackLineCache"
						},
						{
							"name": "BrewhouseCache"
						},
						{
							"dataset": {
								"referenceName": "DWFactKPIStaging",
								"type": "DatasetReference"
							},
							"name": "InsertFactWM"
						},
						{
							"dataset": {
								"referenceName": "FactUpdateTracker",
								"type": "DatasetReference"
							},
							"name": "UpdateTracker1"
						},
						{
							"dataset": {
								"referenceName": "FactUpdateTracker",
								"type": "DatasetReference"
							},
							"name": "UpdateTracker2"
						}
					],
					"transformations": [
						{
							"name": "UpdateRecords",
							"description": "Input rows that match on SourceLine"
						},
						{
							"name": "ExistingHash",
							"description": "Hash of characterising fields to match WTD and MTD elements"
						},
						{
							"name": "MarkUpdate1",
							"description": "Update the value and lastupdated date"
						},
						{
							"name": "InputHash",
							"description": "Hash of elements to identify similar records"
						},
						{
							"name": "NewRecords",
							"description": "Input rows that do not match on SourceLine\nNOTE Exists does not join the subquery"
						},
						{
							"name": "SplitTimeLines",
							"description": "Split MTD and WTD records from DAY records"
						},
						{
							"name": "MarkUpdate2",
							"description": "Update the value, sourceline and lastupdated date"
						},
						{
							"name": "Lookup1"
						},
						{
							"name": "Select1",
							"description": "pki and new value and lastupdated"
						},
						{
							"name": "Select2",
							"description": "PKI, and new sourceline, lastupdated and value"
						},
						{
							"name": "KeyFromSourceline",
							"description": "Look up the fact pki from the source line for matching source lines"
						},
						{
							"name": "LookupCurrent",
							"description": "Lookup primary key for matched record from sourceline"
						},
						{
							"name": "LookupKeys"
						},
						{
							"name": "LocLookup"
						},
						{
							"name": "PackLineKey"
						},
						{
							"name": "BrewhouseKey"
						},
						{
							"name": "MarkInsert"
						},
						{
							"name": "ConditionalSplit1"
						},
						{
							"name": "Select3"
						},
						{
							"name": "LookupKeys2"
						},
						{
							"name": "MarkInsert1"
						},
						{
							"name": "Select4"
						},
						{
							"name": "Select5"
						},
						{
							"name": "Select6"
						},
						{
							"name": "UpdateTracker1Metadata"
						},
						{
							"name": "UpdateTracker2Metadata"
						}
					],
					"script": "parameters{\n\tBatchNumber as long (toLong(0))\n}\nsource(output(\n\t\tBrewName as string,\n\t\tDateStarting as date,\n\t\tTimeLine as string,\n\t\tFlowMeasure as string,\n\t\tSection as string,\n\t\tArea as string,\n\t\tValue as double,\n\t\tLine as string,\n\t\tBrewhouse as string,\n\t\tMetricName as string,\n\t\tPeriodDate as date,\n\t\tLastUpdated as timestamp,\n\t\tpkiSDLevers as long,\n\t\tfkBatchID as integer,\n\t\tSourceLine as long\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> StagingTable\nsource(output(\n\t\tpkiFactKPI as long,\n\t\tSourceLine as long,\n\t\tLastUpdated as timestamp\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SourceIDs\nsource(output(\n\t\tpkiFactKPI as long,\n\t\tfkDate as date,\n\t\tBrewName as string,\n\t\tTimeLine as string,\n\t\tSubdivision as string,\n\t\tLine as string,\n\t\tBrewhouse as string,\n\t\tLocationLookup as string,\n\t\tMetricName as string,\n\t\tSourceLine as long,\n\t\tLastUpdated as timestamp\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> FactLookup\nsource(output(\n\t\tpkiMetric as long,\n\t\tMetricLU as string,\n\t\tCheckCount as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> MetricLookup\nsource(output(\n\t\tSiteName as string,\n\t\tSiteLookup as string,\n\t\tfkSite as long\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SIteLookup\nsource(output(\n\t\tpkiLocation as long,\n\t\tDivision as string,\n\t\tSubdivision as string,\n\t\tLine as string,\n\t\tBrewhouse as string,\n\t\tLocationLookup as string,\n\t\tCheckCount as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> LocationLookup\nsource(output(\n\t\tpkiTimeLine as integer,\n\t\tTimeLine as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> TimeLineLookup\nsource(output(\n\t\tpkiPackLine as long,\n\t\tfkSite as long,\n\t\tLineName as string,\n\t\tCheckCount as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> PackLineLookup\nsource(output(\n\t\tpkiBrewhouse as long,\n\t\tfkSite as long,\n\t\tBrewhouseName as string,\n\t\tCheckCount as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> BrewhouseLookup\nsource(output(\n\t\tpkiFactKPI as long,\n\t\tfkDate as date,\n\t\tfkSite as long,\n\t\tfkLocation as long,\n\t\tfkPackLine as long,\n\t\tfkBrewhouse as long,\n\t\tfkMetric as long,\n\t\tfkDomain as integer,\n\t\tfkTimeLine as integer,\n\t\tValue as double,\n\t\tWeightingFactor as double,\n\t\tTarget as double,\n\t\tTargetWeightingFactor as double,\n\t\tSourceLine as long,\n\t\tfkBatch as long,\n\t\tLastUpdated as timestamp,\n\t\tDisable as boolean\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> FactCopy\nInputHash, SourceIDs exists(StagingTable@SourceLine == SourceIDs@SourceLine,\n\tnegate:false,\n\tbroadcast: 'auto')~> UpdateRecords\nFactLookup derive(hashExisting = md5(toString(fkDate), BrewName, TimeLine, Line, Brewhouse, MetricName)) ~> ExistingHash\nSelect6 alterRow(updateIf(true())) ~> MarkUpdate1\nStagingTable derive(TMTimeLine = (trim(TimeLine) == 'MTD') || (trim(TimeLine) == 'YTD'),\n\t\tInputHash = md5(toString(PeriodDate), BrewName, TimeLine, Line, Brewhouse, MetricName),\n\t\tLocLookup1 = lower(trim(Area) + trim(coalesce(Line, '')) + trim(coalesce(Brewhouse, ''))),\n\t\tLineLookup = toString(SiteLookupCache#lookup(BrewName).fkSite) + '|' + Line,\n\t\tBrewhouseLookup = toString(SiteLookupCache#lookup(BrewName).fkSite) + '|' + Brewhouse,\n\t\tfkDate = PeriodDate) ~> InputHash\nInputHash, SourceIDs exists(StagingTable@SourceLine == SourceIDs@SourceLine,\n\tnegate:true,\n\tbroadcast: 'auto')~> NewRecords\nNewRecords split(or(trim(TimeLine) == \"MTD\",  trim(TimeLine) == \"WTD\"),\n\tdisjoint: false) ~> SplitTimeLines@(MTDWTDTimeLines, DAYTimeLine)\nConditionalSplit1@FuzzyMatched alterRow(updateIf(true())) ~> MarkUpdate2\nSplitTimeLines@MTDWTDTimeLines, ExistingHash lookup(InputHash == hashExisting,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> Lookup1\nMarkUpdate1 select(mapColumn(\n\t\tpkiFactKPI,\n\t\tLastUpdated,\n\t\tValue\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Select1\nMarkUpdate2 select(mapColumn(\n\t\tpkiFactKPI,\n\t\tSourceLine,\n\t\tLastUpdated,\n\t\tValue\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Select2\nFactLookup select(mapColumn(\n\t\tpkiFactKPI,\n\t\tfkDate,\n\t\tBrewName,\n\t\tTimeLine,\n\t\tSubdivision,\n\t\tLine,\n\t\tBrewhouse,\n\t\tLocationLookup,\n\t\tMetricName,\n\t\tSourceLine,\n\t\tLastUpdated\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> KeyFromSourceline\nUpdateRecords, FactCopy lookup(StagingTable@SourceLine == FactCopy@SourceLine,\n\tmultiple: true,\n\tbroadcast: 'auto',\n\tpickup: 'any')~> LookupCurrent\nSplitTimeLines@DAYTimeLine derive(fkSite = SiteLookupCache#lookup(BrewName).fkSite,\n\t\tfkMetric = MetricLookupCache#lookup(MetricName).fkMetric,\n\t\tfkLocation = LocationCache#lookup(LocLookup1).fkLocation,\n\t\tfkTimeLine = TimeLineCache#lookup(TimeLine).fkTimeLine,\n\t\tfkPackLine = PackLineCache#lookup(LineLookup).fkPackLine,\n\t\tfkBrewhouse = BrewhouseCache#lookup(BrewhouseLookup).fkBrewhouse,\n\t\tfkDomain = 1,\n\t\tfkBatchL = toLong(327),\n\t\tWeightingFactor = toDouble(0),\n\t\tTarget = toDouble(0),\n\t\tTargetWeightingFactor = toDouble(0),\n\t\tDisable = false()) ~> LookupKeys\nLocationLookup derive(LocLookup = lower(trim(Subdivision) + trim(coalesce(Line, '')) + trim(coalesce(Brewhouse, '')))) ~> LocLookup\nPackLineLookup derive(LineKey = toString(fkSite) + '|' + LineName) ~> PackLineKey\nBrewhouseLookup derive(BrewhouseKey = toString(fkSite) + '|' + BrewhouseName) ~> BrewhouseKey\nLookupKeys alterRow(insertIf(true())) ~> MarkInsert\nSelect3 split(InputHash == hashExisting,\n\tdisjoint: false) ~> ConditionalSplit1@(FuzzyMatched, FuzzyUnmatched)\nLookup1 select(mapColumn(\n\t\tBrewName = SplitTimeLines@MTDWTDTimeLines@BrewName,\n\t\tDateStarting,\n\t\tTimeLine = SplitTimeLines@MTDWTDTimeLines@TimeLine,\n\t\tFlowMeasure,\n\t\tSection,\n\t\tArea,\n\t\tValue,\n\t\tLine = SplitTimeLines@MTDWTDTimeLines@Line,\n\t\tBrewhouse = SplitTimeLines@MTDWTDTimeLines@Brewhouse,\n\t\tMetricName = SplitTimeLines@MTDWTDTimeLines@MetricName,\n\t\tPeriodDate,\n\t\tLastUpdated = SplitTimeLines@MTDWTDTimeLines@LastUpdated,\n\t\tfkBatchID,\n\t\tSourceLine = SplitTimeLines@MTDWTDTimeLines@SourceLine,\n\t\tInputHash,\n\t\tpkiFactKPI,\n\t\tfkDate = SplitTimeLines@MTDWTDTimeLines@fkDate,\n\t\thashExisting,\n\t\tLocLookup1,\n\t\tLineLookup,\n\t\tBrewhouseLookup\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select3\nConditionalSplit1@FuzzyUnmatched derive(fkSite = SiteLookupCache#lookup(BrewName).fkSite,\n\t\tfkMetric = MetricLookupCache#lookup(MetricName).fkMetric,\n\t\tfkLocation = LocationCache#lookup(LocLookup1).fkLocation,\n\t\tfkTimeLine = TimeLineCache#lookup(TimeLine).fkTimeLine,\n\t\tfkPackLine = PackLineCache#lookup(LineLookup).fkPackLine,\n\t\tfkBrewhouse = BrewhouseCache#lookup(BrewhouseLookup).fkBrewhouse,\n\t\tfkDomain = 1,\n\t\tfkBatchL = toLong(328),\n\t\tWeightingFactor = toDouble(0),\n\t\tTarget = toDouble(0),\n\t\tTargetWeightingFactor = toDouble(0),\n\t\tDisable = false()) ~> LookupKeys2\nLookupKeys2 alterRow(insertIf(true())) ~> MarkInsert1\nMarkInsert1 select(mapColumn(\n\t\tfkDate,\n\t\tfkSite,\n\t\tfkLocation,\n\t\tfkPackLine,\n\t\tfkBrewhouse,\n\t\tfkMetric,\n\t\tfkDomain,\n\t\tfkTimeLine,\n\t\tValue,\n\t\tWeightingFactor,\n\t\tTarget,\n\t\tTargetWeightingFactor,\n\t\tSourceLine,\n\t\tfkBatch = fkBatchL,\n\t\tLastUpdated,\n\t\tDisable\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Select4\nMarkInsert select(mapColumn(\n\t\tfkDate,\n\t\tfkSite,\n\t\tfkLocation,\n\t\tfkPackLine,\n\t\tfkBrewhouse,\n\t\tfkMetric,\n\t\tfkDomain,\n\t\tfkTimeLine,\n\t\tValue,\n\t\tWeightingFactor,\n\t\tTarget,\n\t\tTargetWeightingFactor,\n\t\tSourceLine,\n\t\tfkBatch = fkBatchL,\n\t\tLastUpdated,\n\t\tDisable\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Select5\nLookupCurrent select(mapColumn(\n\t\tpkiFactKPI,\n\t\tfkDate = FactCopy@fkDate,\n\t\tfkSite,\n\t\tfkLocation,\n\t\tfkPackLine,\n\t\tfkBrewhouse,\n\t\tfkMetric,\n\t\tfkDomain,\n\t\tfkTimeLine,\n\t\tValue = StagingTable@Value,\n\t\tWeightingFactor,\n\t\tTarget,\n\t\tTargetWeightingFactor,\n\t\tSourceLine = FactCopy@SourceLine,\n\t\tfkBatch = fkBatchID,\n\t\tLastUpdated = StagingTable@LastUpdated,\n\t\tDisable\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Select6\nSelect1 derive(SourceLine = toLong(null()),\n\t\tDataSource = \"Day branch\",\n\t\tUpdated = fromUTC(currentUTC(), \"South Africa Standard Time\")) ~> UpdateTracker1Metadata\nSelect2 derive(DataSource = \"Week/Month branch\",\n\t\tUpdated = fromUTC(currentUTC(), \"South Africa Standard Time\")) ~> UpdateTracker2Metadata\nSelect1 sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tpkiFactKPI as long,\n\t\tfkDate as date,\n\t\tfkSite as long,\n\t\tfkLocation as long,\n\t\tfkPackLine as long,\n\t\tfkBrewhouse as long,\n\t\tfkMetric as long,\n\t\tfkDomain as integer,\n\t\tfkTimeLine as integer,\n\t\tValue as double,\n\t\tWeightingFactor as double,\n\t\tTarget as double,\n\t\tTargetWeightingFactor as double,\n\t\tSourceLine as long,\n\t\tfkBatch as long,\n\t\tLastUpdated as timestamp,\n\t\tDisable as boolean\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['pkiFactKPI'],\n\tskipKeyWrites:true,\n\tformat: 'table',\n\tsaveOrder: 7,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tpkiFactKPI,\n\t\tLastUpdated,\n\t\tValue\n\t)) ~> UpdateFact2\nSelect2 sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tpkiFactKPI as long,\n\t\tfkDate as date,\n\t\tfkSite as long,\n\t\tfkLocation as long,\n\t\tfkPackLine as long,\n\t\tfkBrewhouse as long,\n\t\tfkMetric as long,\n\t\tfkDomain as integer,\n\t\tfkTimeLine as integer,\n\t\tValue as double,\n\t\tWeightingFactor as double,\n\t\tTarget as double,\n\t\tTargetWeightingFactor as double,\n\t\tSourceLine as long,\n\t\tfkBatch as long,\n\t\tLastUpdated as timestamp,\n\t\tDisable as boolean\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['pkiFactKPI'],\n\tskipKeyWrites:true,\n\tformat: 'table',\n\tsaveOrder: 6,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tpkiFactKPI,\n\t\tValue,\n\t\tSourceLine,\n\t\tLastUpdated\n\t)) ~> UpdateFact1\nSelect5 sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tfkDate as date,\n\t\tfkSite as long,\n\t\tfkLocation as long,\n\t\tfkPackLine as long,\n\t\tfkBrewhouse as long,\n\t\tfkMetric as long,\n\t\tfkDomain as integer,\n\t\tfkTimeLine as integer,\n\t\tValue as double,\n\t\tWeightingFactor as double,\n\t\tTarget as double,\n\t\tTargetWeightingFactor as double,\n\t\tSourceLine as long,\n\t\tfkBatch as long,\n\t\tLastUpdated as timestamp,\n\t\tDisable as boolean\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tsaveOrder: 4,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tfkDate,\n\t\tfkSite,\n\t\tfkLocation,\n\t\tfkPackLine,\n\t\tfkBrewhouse,\n\t\tfkMetric,\n\t\tfkDomain,\n\t\tfkTimeLine,\n\t\tValue,\n\t\tWeightingFactor,\n\t\tTarget,\n\t\tTargetWeightingFactor,\n\t\tSourceLine,\n\t\tfkBatch,\n\t\tLastUpdated,\n\t\tDisable\n\t)) ~> InsertFactD\nSIteLookup sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tkeys:['SiteLookup'],\n\tstore: 'cache',\n\tformat: 'inline',\n\toutput: false,\n\tsaveOrder: 1,\n\tmapColumn(\n\t\tSiteLookup,\n\t\tfkSite\n\t)) ~> SiteLookupCache\nMetricLookup sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tkeys:['MetricLU'],\n\tstore: 'cache',\n\tformat: 'inline',\n\toutput: false,\n\tsaveOrder: 2,\n\tmapColumn(\n\t\tfkMetric = pkiMetric,\n\t\tMetricLU\n\t)) ~> MetricLookupCache\nLocLookup sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tkeys:['LocationLookup'],\n\tstore: 'cache',\n\tformat: 'inline',\n\toutput: false,\n\tsaveOrder: 1,\n\tmapColumn(\n\t\tfkLocation = pkiLocation,\n\t\tLocationLookup\n\t)) ~> LocationCache\nTimeLineLookup sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tkeys:['TimeLine'],\n\tstore: 'cache',\n\tformat: 'inline',\n\toutput: false,\n\tsaveOrder: 2,\n\tmapColumn(\n\t\tfkTimeLine = pkiTimeLine,\n\t\tTimeLine\n\t)) ~> TimeLineCache\nPackLineKey sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tkeys:['LineKey'],\n\tstore: 'cache',\n\tformat: 'inline',\n\toutput: false,\n\tsaveOrder: 2,\n\tmapColumn(\n\t\tfkPackLine = pkiPackLine,\n\t\tLineKey\n\t)) ~> PackLineCache\nBrewhouseKey sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tkeys:['BrewhouseKey'],\n\tstore: 'cache',\n\tformat: 'inline',\n\toutput: false,\n\tsaveOrder: 2,\n\tmapColumn(\n\t\tfkBrewhouse = pkiBrewhouse,\n\t\tBrewhouseKey\n\t)) ~> BrewhouseCache\nSelect4 sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tfkDate as date,\n\t\tfkSite as long,\n\t\tfkLocation as long,\n\t\tfkPackLine as long,\n\t\tfkBrewhouse as long,\n\t\tfkMetric as long,\n\t\tfkDomain as integer,\n\t\tfkTimeLine as integer,\n\t\tValue as double,\n\t\tWeightingFactor as double,\n\t\tTarget as double,\n\t\tTargetWeightingFactor as double,\n\t\tSourceLine as long,\n\t\tfkBatch as long,\n\t\tLastUpdated as timestamp,\n\t\tDisable as boolean\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tsaveOrder: 5,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tfkDate,\n\t\tfkSite,\n\t\tfkLocation,\n\t\tfkPackLine,\n\t\tfkBrewhouse,\n\t\tfkMetric,\n\t\tfkDomain,\n\t\tfkTimeLine,\n\t\tValue,\n\t\tWeightingFactor,\n\t\tTarget,\n\t\tTargetWeightingFactor,\n\t\tSourceLine,\n\t\tfkBatch,\n\t\tLastUpdated,\n\t\tDisable\n\t)) ~> InsertFactWM\nUpdateTracker1Metadata sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tpkiFactKPI as long,\n\t\tLastUpdated as timestamp,\n\t\tValue as double,\n\t\tSourceLine as long,\n\t\tDataSource as string,\n\t\tUpdated as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tsaveOrder: 8,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tpkiFactKPI,\n\t\tLastUpdated,\n\t\tValue,\n\t\tSourceLine,\n\t\tDataSource,\n\t\tUpdated\n\t)) ~> UpdateTracker1\nUpdateTracker2Metadata sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tpkiFactKPI as long,\n\t\tLastUpdated as timestamp,\n\t\tValue as double,\n\t\tSourceLine as long,\n\t\tDataSource as string,\n\t\tUpdated as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 9,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tpkiFactKPI,\n\t\tLastUpdated,\n\t\tValue,\n\t\tSourceLine,\n\t\tDataSource,\n\t\tUpdated\n\t)) ~> UpdateTracker2"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ODS_SDLevers')]",
				"[concat(variables('factoryId'), '/datasets/SourceIDLookup')]",
				"[concat(variables('factoryId'), '/datasets/REF_FactLookup')]",
				"[concat(variables('factoryId'), '/datasets/REF_MetricLookup')]",
				"[concat(variables('factoryId'), '/datasets/REF_SiteLookup')]",
				"[concat(variables('factoryId'), '/datasets/REF_LocationLookup')]",
				"[concat(variables('factoryId'), '/datasets/REF_TimeLineLookup')]",
				"[concat(variables('factoryId'), '/datasets/REF_PackLineLookup')]",
				"[concat(variables('factoryId'), '/datasets/REF_BrewhouseLookup')]",
				"[concat(variables('factoryId'), '/datasets/DWFactKPIRead')]",
				"[concat(variables('factoryId'), '/datasets/DWFactKPI')]",
				"[concat(variables('factoryId'), '/datasets/DWFactKPIStaging')]",
				"[concat(variables('factoryId'), '/datasets/FactUpdateTracker')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DFFactKPI_ETL2_copy1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Fact DF"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ODS_SDLevers",
								"type": "DatasetReference"
							},
							"name": "StagingTable"
						},
						{
							"dataset": {
								"referenceName": "SourceIDLookup",
								"type": "DatasetReference"
							},
							"name": "SourceIDs"
						},
						{
							"dataset": {
								"referenceName": "REF_FactLookup",
								"type": "DatasetReference"
							},
							"name": "FactLookup"
						},
						{
							"dataset": {
								"referenceName": "REF_MetricLookup",
								"type": "DatasetReference"
							},
							"name": "MetricLookup"
						},
						{
							"dataset": {
								"referenceName": "REF_SiteLookup",
								"type": "DatasetReference"
							},
							"name": "SIteLookup"
						},
						{
							"dataset": {
								"referenceName": "REF_LocationLookup",
								"type": "DatasetReference"
							},
							"name": "LocationLookup"
						},
						{
							"dataset": {
								"referenceName": "REF_TimeLineLookup",
								"type": "DatasetReference"
							},
							"name": "TimeLineLookup"
						},
						{
							"dataset": {
								"referenceName": "REF_PackLineLookup",
								"type": "DatasetReference"
							},
							"name": "PackLineLookup"
						},
						{
							"dataset": {
								"referenceName": "REF_BrewhouseLookup",
								"type": "DatasetReference"
							},
							"name": "BrewhouseLookup"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DWFactKPI",
								"type": "DatasetReference"
							},
							"name": "DWFactKPI1",
							"description": "Update DWFactKPI"
						},
						{
							"dataset": {
								"referenceName": "DWFactKPI",
								"type": "DatasetReference"
							},
							"name": "DWFactKPI2",
							"description": "Update DWFactKPI"
						},
						{
							"dataset": {
								"referenceName": "DebugOutput",
								"type": "DatasetReference"
							},
							"name": "DriftedDebugSink"
						},
						{
							"name": "SiteLookupCache"
						},
						{
							"name": "MetricLookupCache"
						},
						{
							"name": "LocationCache"
						},
						{
							"name": "TimeLineCache"
						},
						{
							"name": "PackLineCache"
						},
						{
							"name": "BrewhouseCache"
						}
					],
					"transformations": [
						{
							"name": "UpdateRecords",
							"description": "Input rows that match on SourceLine"
						},
						{
							"name": "ExistingHash",
							"description": "Hash of characterising fields to match WTD and MTD elements"
						},
						{
							"name": "MarkUpdate1",
							"description": "Update the value and lastupdated date"
						},
						{
							"name": "InputHash",
							"description": "Hash of elements to identify similar records"
						},
						{
							"name": "NewRecords",
							"description": "Input rows that do not match on SourceLine"
						},
						{
							"name": "SplitTimeLines",
							"description": "Split MTD and WTD records from DAY records"
						},
						{
							"name": "MarkUpdate2",
							"description": "Update the value, sourceline and lastupdated date"
						},
						{
							"name": "Lookup1"
						},
						{
							"name": "RecentUpdates",
							"description": "Filter input fields updated more recently than the fact field"
						},
						{
							"name": "Select1",
							"description": "pki and new value and lastupdated"
						},
						{
							"name": "Select2",
							"description": "PKI, and new sourceline, lastupdated and value"
						},
						{
							"name": "KeyFromSourceline"
						},
						{
							"name": "LookupPrimaryKey",
							"description": "Lookup primary key for matched record from sourceline"
						},
						{
							"name": "LookupKeys"
						},
						{
							"name": "LocLookup"
						},
						{
							"name": "PackLineKey"
						},
						{
							"name": "BrewhouseKey"
						},
						{
							"name": "MarkInsert"
						}
					],
					"script": "parameters{\n\tbatchID as integer (0)\n}\nsource(output(\n\t\tBrewName as string,\n\t\tDateStarting as date,\n\t\tTimeLine as string,\n\t\tFlowMeasure as string,\n\t\tSection as string,\n\t\tArea as string,\n\t\tValue as double,\n\t\tLine as string,\n\t\tBrewhouse as string,\n\t\tMetricName as string,\n\t\tPeriodDate as date,\n\t\tLastUpdated as timestamp,\n\t\tpkiSDLevers as long,\n\t\tfkBatchID as integer,\n\t\tSourceLine as long\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> StagingTable\nsource(output(\n\t\tpkiFactKPI as long,\n\t\tSourceLine as long,\n\t\tLastUpdated as timestamp\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SourceIDs\nsource(output(\n\t\tpkiFactKPI as long,\n\t\tfkDate as date,\n\t\tBrewName as string,\n\t\tTimeLine as string,\n\t\tSubdivision as string,\n\t\tLine as string,\n\t\tBrewhouse as string,\n\t\tLocationLookup as string,\n\t\tMetricName as string,\n\t\tSourceLine as long,\n\t\tLastUpdated as timestamp\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> FactLookup\nsource(output(\n\t\tpkiMetric as long,\n\t\tMetricLU as string,\n\t\tCheckCount as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> MetricLookup\nsource(output(\n\t\tSiteName as string,\n\t\tSiteLookup as string,\n\t\tfkSite as long\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SIteLookup\nsource(output(\n\t\tpkiLocation as long,\n\t\tDivision as string,\n\t\tSubdivision as string,\n\t\tLine as string,\n\t\tBrewhouse as string,\n\t\tLocationLookup as string,\n\t\tCheckCount as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> LocationLookup\nsource(output(\n\t\tpkiTimeLine as integer,\n\t\tTimeLine as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> TimeLineLookup\nsource(output(\n\t\tpkiPackLine as long,\n\t\tfkSite as long,\n\t\tLineName as string,\n\t\tCheckCount as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> PackLineLookup\nsource(output(\n\t\tpkiBrewhouse as long,\n\t\tfkSite as long,\n\t\tBrewhouseName as string,\n\t\tCheckCount as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> BrewhouseLookup\nInputHash, SourceIDs exists(StagingTable@SourceLine == SourceIDs@SourceLine,\n\tnegate:false,\n\tbroadcast: 'auto')~> UpdateRecords\nFactLookup derive(hashExisting = md5(toString(fkDate), BrewName, TimeLine, Line, Brewhouse, MetricName)) ~> ExistingHash\nLookupPrimaryKey alterRow(updateIf(true())) ~> MarkUpdate1\nStagingTable derive(InputHash = md5(toString(PeriodDate), BrewName, TimeLine, Line, Brewhouse, MetricName),\n\t\tBatchID = $batchID,\n\t\tLocLookup1 = lower(trim(Area) + trim(coalesce(Line, '')) + trim(coalesce(Brewhouse, ''))),\n\t\tLineLookup = toString(SiteLookupCache#lookup(BrewName).fkSite) + '|' + Line,\n\t\tBrewhouseLookup = toString(SiteLookupCache#lookup(BrewName).fkSite) + '|' + Brewhouse) ~> InputHash\nInputHash, SourceIDs exists(StagingTable@SourceLine == SourceIDs@SourceLine,\n\tnegate:true,\n\tbroadcast: 'auto')~> NewRecords\nNewRecords split(TimeLine == 'MTD' || TimeLine == 'YTD',\n\tdisjoint: false) ~> SplitTimeLines@(MTDWTDTimeLines, DAYTimeLine)\nRecentUpdates alterRow(updateIf(true())) ~> MarkUpdate2\nSplitTimeLines@MTDWTDTimeLines, ExistingHash lookup(InputHash == hashExisting,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> Lookup1\nLookup1 filter(SplitTimeLines@MTDWTDTimeLines@LastUpdated > FactLookup@LastUpdated) ~> RecentUpdates\nMarkUpdate1 select(mapColumn(\n\t\tpkiFactKPI,\n\t\tfkBatchID = BatchID,\n\t\tLastUpdated,\n\t\tValue\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Select1\nMarkUpdate2 select(mapColumn(\n\t\tpkiFactKPI,\n\t\tSourceLine = SplitTimeLines@MTDWTDTimeLines@SourceLine,\n\t\tLastUpdated = SplitTimeLines@MTDWTDTimeLines@LastUpdated,\n\t\tfkBatchID = BatchID,\n\t\tValue\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Select2\nFactLookup select(mapColumn(\n\t\tpkiFactKPI,\n\t\tSourceLine\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> KeyFromSourceline\nUpdateRecords, KeyFromSourceline lookup(StagingTable@SourceLine == KeyFromSourceline@SourceLine,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupPrimaryKey\nSplitTimeLines@DAYTimeLine derive(fkSite = SiteLookupCache#lookup(BrewName).fkSite,\n\t\tfkMetric = MetricLookupCache#lookup(MetricName).fkMetric,\n\t\tfkLocation = LocationCache#lookup(LocLookup1).fkLocation,\n\t\tfkTimeLine = TimeLineCache#lookup(TimeLine).fkTimeLine,\n\t\tfkPackLine = PackLineCache#lookup(LineLookup).fkPackLine,\n\t\tfkBrewhouse = BrewhouseCache#lookup(BrewhouseLookup).fkBrewhouse,\n\t\tfkDomain = 1) ~> LookupKeys\nLocationLookup derive(LocLookup = lower(trim(Subdivision) + trim(coalesce(Line, '')) + trim(coalesce(Brewhouse, '')))) ~> LocLookup\nPackLineLookup derive(LineKey = toString(fkSite) + '|' + LineName) ~> PackLineKey\nBrewhouseLookup derive(BrewhouseKey = toString(fkSite) + '|' + BrewhouseName) ~> BrewhouseKey\nLookupKeys alterRow(insertIf(true())) ~> MarkInsert\nSelect1 sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tpkiFactKPI as long,\n\t\tfkDate as date,\n\t\tfkSite as long,\n\t\tfkLocation as long,\n\t\tfkPackLine as long,\n\t\tfkBrewhouse as long,\n\t\tfkMetric as long,\n\t\tfkDomain as integer,\n\t\tfkTimeLine as integer,\n\t\tValue as double,\n\t\tWeightingFactor as double,\n\t\tTarget as double,\n\t\tTargetWeightingFactor as double,\n\t\tSourceLine as long,\n\t\tfkBatch as long,\n\t\tLastUpdated as timestamp,\n\t\tDisable as boolean\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['pkiFactKPI'],\n\tskipKeyWrites:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tValue,\n\t\tLastUpdated,\n\t\tpkiFactKPI\n\t)) ~> DWFactKPI1\nSelect2 sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tpkiFactKPI as long,\n\t\tfkDate as date,\n\t\tfkSite as long,\n\t\tfkLocation as long,\n\t\tfkPackLine as long,\n\t\tfkBrewhouse as long,\n\t\tfkMetric as long,\n\t\tfkDomain as integer,\n\t\tfkTimeLine as integer,\n\t\tValue as double,\n\t\tWeightingFactor as double,\n\t\tTarget as double,\n\t\tTargetWeightingFactor as double,\n\t\tSourceLine as long,\n\t\tfkBatch as long,\n\t\tLastUpdated as timestamp,\n\t\tDisable as boolean\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['pkiFactKPI'],\n\tskipKeyWrites:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tpkiFactKPI,\n\t\tValue,\n\t\tSourceLine,\n\t\tLastUpdated\n\t)) ~> DWFactKPI2\nMarkInsert sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tPlant as string,\n\t\t{Fin Year} as string,\n\t\tMonth as string,\n\t\t{MTD/YTD} as string,\n\t\t{KPI Name} as string,\n\t\tTarget as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> DriftedDebugSink\nSIteLookup sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tkeys:['SiteLookup'],\n\tstore: 'cache',\n\tformat: 'inline',\n\toutput: false,\n\tsaveOrder: 0,\n\tmapColumn(\n\t\tSiteLookup,\n\t\tfkSite\n\t)) ~> SiteLookupCache\nMetricLookup sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tkeys:['MetricLU'],\n\tstore: 'cache',\n\tformat: 'inline',\n\toutput: false,\n\tsaveOrder: 0,\n\tmapColumn(\n\t\tfkMetric = pkiMetric,\n\t\tMetricLU\n\t)) ~> MetricLookupCache\nLocLookup sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tkeys:['LocationLookup'],\n\tstore: 'cache',\n\tformat: 'inline',\n\toutput: false,\n\tsaveOrder: 0,\n\tmapColumn(\n\t\tfkLocation = pkiLocation,\n\t\tLocationLookup\n\t)) ~> LocationCache\nTimeLineLookup sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tkeys:['TimeLine'],\n\tstore: 'cache',\n\tformat: 'inline',\n\toutput: false,\n\tsaveOrder: 0,\n\tmapColumn(\n\t\tfkTimeLine = pkiTimeLine,\n\t\tTimeLine\n\t)) ~> TimeLineCache\nPackLineKey sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tkeys:['LineKey'],\n\tstore: 'cache',\n\tformat: 'inline',\n\toutput: false,\n\tsaveOrder: 1,\n\tmapColumn(\n\t\tfkPackLine = pkiPackLine,\n\t\tLineKey\n\t)) ~> PackLineCache\nBrewhouseKey sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tkeys:['BrewhouseKey'],\n\tstore: 'cache',\n\tformat: 'inline',\n\toutput: false,\n\tsaveOrder: 1,\n\tmapColumn(\n\t\tfkBrewhouse = pkiBrewhouse,\n\t\tBrewhouseKey\n\t)) ~> BrewhouseCache"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ODS_SDLevers')]",
				"[concat(variables('factoryId'), '/datasets/SourceIDLookup')]",
				"[concat(variables('factoryId'), '/datasets/REF_FactLookup')]",
				"[concat(variables('factoryId'), '/datasets/REF_MetricLookup')]",
				"[concat(variables('factoryId'), '/datasets/REF_SiteLookup')]",
				"[concat(variables('factoryId'), '/datasets/REF_LocationLookup')]",
				"[concat(variables('factoryId'), '/datasets/REF_TimeLineLookup')]",
				"[concat(variables('factoryId'), '/datasets/REF_PackLineLookup')]",
				"[concat(variables('factoryId'), '/datasets/REF_BrewhouseLookup')]",
				"[concat(variables('factoryId'), '/datasets/DWFactKPI')]",
				"[concat(variables('factoryId'), '/datasets/DebugOutput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DFFactKPI_ETL2_copy2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Fact DF"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ODS_SDLevers",
								"type": "DatasetReference"
							},
							"name": "StagingTable"
						},
						{
							"dataset": {
								"referenceName": "SourceIDLookup",
								"type": "DatasetReference"
							},
							"name": "SourceIDs"
						},
						{
							"dataset": {
								"referenceName": "REF_FactLookup",
								"type": "DatasetReference"
							},
							"name": "FactLookup"
						},
						{
							"dataset": {
								"referenceName": "REF_MetricLookup",
								"type": "DatasetReference"
							},
							"name": "MetricLookup"
						},
						{
							"dataset": {
								"referenceName": "REF_SiteLookup",
								"type": "DatasetReference"
							},
							"name": "SIteLookup"
						},
						{
							"dataset": {
								"referenceName": "REF_LocationLookup",
								"type": "DatasetReference"
							},
							"name": "LocationLookup"
						},
						{
							"dataset": {
								"referenceName": "REF_TimeLineLookup",
								"type": "DatasetReference"
							},
							"name": "TimeLineLookup"
						},
						{
							"dataset": {
								"referenceName": "REF_PackLineLookup",
								"type": "DatasetReference"
							},
							"name": "PackLineLookup"
						},
						{
							"dataset": {
								"referenceName": "REF_BrewhouseLookup",
								"type": "DatasetReference"
							},
							"name": "BrewhouseLookup"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DWFactKPI",
								"type": "DatasetReference"
							},
							"name": "DWFactKPI1",
							"description": "Update DWFactKPI"
						},
						{
							"dataset": {
								"referenceName": "DWFactKPI",
								"type": "DatasetReference"
							},
							"name": "DWFactKPI2",
							"description": "Update DWFactKPI"
						},
						{
							"dataset": {
								"referenceName": "DebugOutput",
								"type": "DatasetReference"
							},
							"name": "DriftedDebugSink"
						},
						{
							"name": "SiteLookupCache"
						},
						{
							"name": "MetricLookupCache"
						},
						{
							"name": "LocationCache"
						},
						{
							"name": "TimeLineCache"
						},
						{
							"name": "PackLineCache"
						},
						{
							"name": "BrewhouseCache"
						}
					],
					"transformations": [
						{
							"name": "UpdateRecords",
							"description": "Input rows that match on SourceLine"
						},
						{
							"name": "ExistingHash",
							"description": "Hash of characterising fields to match WTD and MTD elements"
						},
						{
							"name": "MarkUpdate1",
							"description": "Update the value and lastupdated date"
						},
						{
							"name": "InputHash",
							"description": "Hash of elements to identify similar records"
						},
						{
							"name": "NewRecords",
							"description": "Input rows that do not match on SourceLine"
						},
						{
							"name": "SplitTimeLines",
							"description": "Split MTD and WTD records from DAY records"
						},
						{
							"name": "MarkUpdate2",
							"description": "Update the value, sourceline and lastupdated date"
						},
						{
							"name": "Lookup1"
						},
						{
							"name": "RecentUpdates",
							"description": "Filter input fields updated more recently than the fact field"
						},
						{
							"name": "Select1",
							"description": "pki and new value and lastupdated"
						},
						{
							"name": "Select2",
							"description": "PKI, and new sourceline, lastupdated and value"
						},
						{
							"name": "KeyFromSourceline"
						},
						{
							"name": "LookupPrimaryKey",
							"description": "Lookup primary key for matched record from sourceline"
						},
						{
							"name": "LookupKeys"
						},
						{
							"name": "LocLookup"
						},
						{
							"name": "PackLineKey"
						},
						{
							"name": "BrewhouseKey"
						},
						{
							"name": "MarkInsert"
						}
					],
					"script": "parameters{\n\tbatchID as integer (0)\n}\nsource(output(\n\t\tBrewName as string,\n\t\tDateStarting as date,\n\t\tTimeLine as string,\n\t\tFlowMeasure as string,\n\t\tSection as string,\n\t\tArea as string,\n\t\tValue as double,\n\t\tLine as string,\n\t\tBrewhouse as string,\n\t\tMetricName as string,\n\t\tPeriodDate as date,\n\t\tLastUpdated as timestamp,\n\t\tpkiSDLevers as long,\n\t\tfkBatchID as integer,\n\t\tSourceLine as long\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> StagingTable\nsource(output(\n\t\tpkiFactKPI as long,\n\t\tSourceLine as long,\n\t\tLastUpdated as timestamp\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SourceIDs\nsource(output(\n\t\tpkiFactKPI as long,\n\t\tfkDate as date,\n\t\tBrewName as string,\n\t\tTimeLine as string,\n\t\tSubdivision as string,\n\t\tLine as string,\n\t\tBrewhouse as string,\n\t\tLocationLookup as string,\n\t\tMetricName as string,\n\t\tSourceLine as long,\n\t\tLastUpdated as timestamp\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> FactLookup\nsource(output(\n\t\tpkiMetric as long,\n\t\tMetricLU as string,\n\t\tCheckCount as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> MetricLookup\nsource(output(\n\t\tSiteName as string,\n\t\tSiteLookup as string,\n\t\tfkSite as long\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SIteLookup\nsource(output(\n\t\tpkiLocation as long,\n\t\tDivision as string,\n\t\tSubdivision as string,\n\t\tLine as string,\n\t\tBrewhouse as string,\n\t\tLocationLookup as string,\n\t\tCheckCount as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> LocationLookup\nsource(output(\n\t\tpkiTimeLine as integer,\n\t\tTimeLine as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> TimeLineLookup\nsource(output(\n\t\tpkiPackLine as long,\n\t\tfkSite as long,\n\t\tLineName as string,\n\t\tCheckCount as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> PackLineLookup\nsource(output(\n\t\tpkiBrewhouse as long,\n\t\tfkSite as long,\n\t\tBrewhouseName as string,\n\t\tCheckCount as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> BrewhouseLookup\nInputHash, SourceIDs exists(StagingTable@SourceLine == SourceIDs@SourceLine,\n\tnegate:false,\n\tbroadcast: 'auto')~> UpdateRecords\nFactLookup derive(hashExisting = md5(toString(fkDate), BrewName, TimeLine, Line, Brewhouse, MetricName)) ~> ExistingHash\nLookupPrimaryKey alterRow(updateIf(true())) ~> MarkUpdate1\nStagingTable derive(InputHash = md5(toString(PeriodDate), BrewName, TimeLine, Line, Brewhouse, MetricName),\n\t\tBatchID = $batchID,\n\t\tLocLookup1 = lower(trim(Area) + trim(coalesce(Line, '')) + trim(coalesce(Brewhouse, ''))),\n\t\tLineLookup = toString(SiteLookupCache#lookup(BrewName).fkSite) + '|' + Line,\n\t\tBrewhouseLookup = toString(SiteLookupCache#lookup(BrewName).fkSite) + '|' + Brewhouse) ~> InputHash\nInputHash, SourceIDs exists(StagingTable@SourceLine == SourceIDs@SourceLine,\n\tnegate:true,\n\tbroadcast: 'auto')~> NewRecords\nNewRecords split(TimeLine == 'MTD' || TimeLine == 'YTD',\n\tdisjoint: false) ~> SplitTimeLines@(MTDWTDTimeLines, DAYTimeLine)\nRecentUpdates alterRow(updateIf(true())) ~> MarkUpdate2\nSplitTimeLines@MTDWTDTimeLines, ExistingHash lookup(InputHash == hashExisting,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> Lookup1\nLookup1 filter(SplitTimeLines@MTDWTDTimeLines@LastUpdated > FactLookup@LastUpdated) ~> RecentUpdates\nMarkUpdate1 select(mapColumn(\n\t\tpkiFactKPI,\n\t\tfkBatchID = BatchID,\n\t\tLastUpdated,\n\t\tValue\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Select1\nMarkUpdate2 select(mapColumn(\n\t\tpkiFactKPI,\n\t\tSourceLine = SplitTimeLines@MTDWTDTimeLines@SourceLine,\n\t\tLastUpdated = SplitTimeLines@MTDWTDTimeLines@LastUpdated,\n\t\tfkBatchID = BatchID,\n\t\tValue\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Select2\nFactLookup select(mapColumn(\n\t\tpkiFactKPI,\n\t\tSourceLine\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> KeyFromSourceline\nUpdateRecords, KeyFromSourceline lookup(StagingTable@SourceLine == KeyFromSourceline@SourceLine,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupPrimaryKey\nSplitTimeLines@DAYTimeLine derive(fkSite = SiteLookupCache#lookup(BrewName).fkSite,\n\t\tfkMetric = MetricLookupCache#lookup(MetricName).fkMetric,\n\t\tfkLocation = LocationCache#lookup(LocLookup1).fkLocation,\n\t\tfkTimeLine = TimeLineCache#lookup(TimeLine).fkTimeLine,\n\t\tfkPackLine = PackLineCache#lookup(LineLookup).fkPackLine,\n\t\tfkBrewhouse = BrewhouseCache#lookup(BrewhouseLookup).fkBrewhouse,\n\t\tfkDomain = 1) ~> LookupKeys\nLocationLookup derive(LocLookup = lower(trim(Subdivision) + trim(coalesce(Line, '')) + trim(coalesce(Brewhouse, '')))) ~> LocLookup\nPackLineLookup derive(LineKey = toString(fkSite) + '|' + LineName) ~> PackLineKey\nBrewhouseLookup derive(BrewhouseKey = toString(fkSite) + '|' + BrewhouseName) ~> BrewhouseKey\nLookupKeys alterRow(insertIf(true())) ~> MarkInsert\nSelect1 sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tpkiFactKPI as long,\n\t\tfkDate as date,\n\t\tfkSite as long,\n\t\tfkLocation as long,\n\t\tfkPackLine as long,\n\t\tfkBrewhouse as long,\n\t\tfkMetric as long,\n\t\tfkDomain as integer,\n\t\tfkTimeLine as integer,\n\t\tValue as double,\n\t\tWeightingFactor as double,\n\t\tTarget as double,\n\t\tTargetWeightingFactor as double,\n\t\tSourceLine as long,\n\t\tfkBatch as long,\n\t\tLastUpdated as timestamp,\n\t\tDisable as boolean\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['pkiFactKPI'],\n\tskipKeyWrites:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tValue,\n\t\tLastUpdated,\n\t\tpkiFactKPI\n\t)) ~> DWFactKPI1\nSelect2 sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tpkiFactKPI as long,\n\t\tfkDate as date,\n\t\tfkSite as long,\n\t\tfkLocation as long,\n\t\tfkPackLine as long,\n\t\tfkBrewhouse as long,\n\t\tfkMetric as long,\n\t\tfkDomain as integer,\n\t\tfkTimeLine as integer,\n\t\tValue as double,\n\t\tWeightingFactor as double,\n\t\tTarget as double,\n\t\tTargetWeightingFactor as double,\n\t\tSourceLine as long,\n\t\tfkBatch as long,\n\t\tLastUpdated as timestamp,\n\t\tDisable as boolean\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['pkiFactKPI'],\n\tskipKeyWrites:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tpkiFactKPI,\n\t\tValue,\n\t\tSourceLine,\n\t\tLastUpdated\n\t)) ~> DWFactKPI2\nMarkInsert sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tPlant as string,\n\t\t{Fin Year} as string,\n\t\tMonth as string,\n\t\t{MTD/YTD} as string,\n\t\t{KPI Name} as string,\n\t\tTarget as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> DriftedDebugSink\nSIteLookup sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tkeys:['SiteLookup'],\n\tstore: 'cache',\n\tformat: 'inline',\n\toutput: false,\n\tsaveOrder: 0,\n\tmapColumn(\n\t\tSiteLookup,\n\t\tfkSite\n\t)) ~> SiteLookupCache\nMetricLookup sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tkeys:['MetricLU'],\n\tstore: 'cache',\n\tformat: 'inline',\n\toutput: false,\n\tsaveOrder: 0,\n\tmapColumn(\n\t\tfkMetric = pkiMetric,\n\t\tMetricLU\n\t)) ~> MetricLookupCache\nLocLookup sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tkeys:['LocationLookup'],\n\tstore: 'cache',\n\tformat: 'inline',\n\toutput: false,\n\tsaveOrder: 0,\n\tmapColumn(\n\t\tfkLocation = pkiLocation,\n\t\tLocationLookup\n\t)) ~> LocationCache\nTimeLineLookup sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tkeys:['TimeLine'],\n\tstore: 'cache',\n\tformat: 'inline',\n\toutput: false,\n\tsaveOrder: 0,\n\tmapColumn(\n\t\tfkTimeLine = pkiTimeLine,\n\t\tTimeLine\n\t)) ~> TimeLineCache\nPackLineKey sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tkeys:['LineKey'],\n\tstore: 'cache',\n\tformat: 'inline',\n\toutput: false,\n\tsaveOrder: 1,\n\tmapColumn(\n\t\tfkPackLine = pkiPackLine,\n\t\tLineKey\n\t)) ~> PackLineCache\nBrewhouseKey sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tkeys:['BrewhouseKey'],\n\tstore: 'cache',\n\tformat: 'inline',\n\toutput: false,\n\tsaveOrder: 1,\n\tmapColumn(\n\t\tfkBrewhouse = pkiBrewhouse,\n\t\tBrewhouseKey\n\t)) ~> BrewhouseCache"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ODS_SDLevers')]",
				"[concat(variables('factoryId'), '/datasets/SourceIDLookup')]",
				"[concat(variables('factoryId'), '/datasets/REF_FactLookup')]",
				"[concat(variables('factoryId'), '/datasets/REF_MetricLookup')]",
				"[concat(variables('factoryId'), '/datasets/REF_SiteLookup')]",
				"[concat(variables('factoryId'), '/datasets/REF_LocationLookup')]",
				"[concat(variables('factoryId'), '/datasets/REF_TimeLineLookup')]",
				"[concat(variables('factoryId'), '/datasets/REF_PackLineLookup')]",
				"[concat(variables('factoryId'), '/datasets/REF_BrewhouseLookup')]",
				"[concat(variables('factoryId'), '/datasets/DWFactKPI')]",
				"[concat(variables('factoryId'), '/datasets/DebugOutput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DFFactKPI_ETL2_copy3')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Fact DF"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ODS_SDLevers",
								"type": "DatasetReference"
							},
							"name": "StagingTable"
						},
						{
							"dataset": {
								"referenceName": "SourceIDLookup",
								"type": "DatasetReference"
							},
							"name": "SourceIDs"
						},
						{
							"dataset": {
								"referenceName": "REF_FactLookup",
								"type": "DatasetReference"
							},
							"name": "FactLookup"
						},
						{
							"dataset": {
								"referenceName": "REF_MetricLookup",
								"type": "DatasetReference"
							},
							"name": "MetricLookup"
						},
						{
							"dataset": {
								"referenceName": "REF_SiteLookup",
								"type": "DatasetReference"
							},
							"name": "SIteLookup"
						},
						{
							"dataset": {
								"referenceName": "REF_LocationLookup",
								"type": "DatasetReference"
							},
							"name": "LocationLookup"
						},
						{
							"dataset": {
								"referenceName": "REF_TimeLineLookup",
								"type": "DatasetReference"
							},
							"name": "TimeLineLookup"
						},
						{
							"dataset": {
								"referenceName": "REF_PackLineLookup",
								"type": "DatasetReference"
							},
							"name": "PackLineLookup"
						},
						{
							"dataset": {
								"referenceName": "REF_BrewhouseLookup",
								"type": "DatasetReference"
							},
							"name": "BrewhouseLookup"
						},
						{
							"dataset": {
								"referenceName": "DWFactKPIRead",
								"type": "DatasetReference"
							},
							"name": "FactCopy"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DWFactKPI",
								"type": "DatasetReference"
							},
							"name": "UpdateFact2",
							"description": "Update DWFactKPI"
						},
						{
							"dataset": {
								"referenceName": "DWFactKPI",
								"type": "DatasetReference"
							},
							"name": "UpdateFact1",
							"description": "Update DWFactKPI"
						},
						{
							"dataset": {
								"referenceName": "DWFactKPIStaging",
								"type": "DatasetReference"
							},
							"name": "InsertFactD"
						},
						{
							"name": "SiteLookupCache"
						},
						{
							"name": "MetricLookupCache"
						},
						{
							"name": "LocationCache"
						},
						{
							"name": "TimeLineCache"
						},
						{
							"name": "PackLineCache"
						},
						{
							"name": "BrewhouseCache"
						},
						{
							"dataset": {
								"referenceName": "DWFactKPIStaging",
								"type": "DatasetReference"
							},
							"name": "InsertFactWM"
						}
					],
					"transformations": [
						{
							"name": "UpdateRecords",
							"description": "Input rows that match on SourceLine"
						},
						{
							"name": "ExistingHash",
							"description": "Hash of characterising fields to match WTD and MTD elements"
						},
						{
							"name": "MarkUpdate1",
							"description": "Update the value and lastupdated date"
						},
						{
							"name": "InputHash",
							"description": "Hash of elements to identify similar records"
						},
						{
							"name": "NewRecords",
							"description": "Input rows that do not match on SourceLine\nNOTE Exists does not join the subquery"
						},
						{
							"name": "SplitTimeLines",
							"description": "Split MTD and WTD records from DAY records"
						},
						{
							"name": "MarkUpdate2",
							"description": "Update the value, sourceline and lastupdated date"
						},
						{
							"name": "Lookup1"
						},
						{
							"name": "Select1",
							"description": "pki and new value and lastupdated"
						},
						{
							"name": "Select2",
							"description": "PKI, and new sourceline, lastupdated and value"
						},
						{
							"name": "KeyFromSourceline",
							"description": "Look up the fact pki from the source line for matching source lines"
						},
						{
							"name": "LookupCurrent",
							"description": "Lookup primary key for matched record from sourceline"
						},
						{
							"name": "LookupKeys"
						},
						{
							"name": "LocLookup"
						},
						{
							"name": "PackLineKey"
						},
						{
							"name": "BrewhouseKey"
						},
						{
							"name": "MarkInsert"
						},
						{
							"name": "ConditionalSplit1"
						},
						{
							"name": "Select3"
						},
						{
							"name": "LookupKeys2"
						},
						{
							"name": "MarkInsert1"
						},
						{
							"name": "Select4"
						},
						{
							"name": "Select5"
						},
						{
							"name": "Select6"
						}
					],
					"script": "source(output(\n\t\tBrewName as string,\n\t\tDateStarting as date,\n\t\tTimeLine as string,\n\t\tFlowMeasure as string,\n\t\tSection as string,\n\t\tArea as string,\n\t\tValue as double,\n\t\tLine as string,\n\t\tBrewhouse as string,\n\t\tMetricName as string,\n\t\tPeriodDate as date,\n\t\tLastUpdated as timestamp,\n\t\tpkiSDLevers as long,\n\t\tfkBatchID as integer,\n\t\tSourceLine as long\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> StagingTable\nsource(output(\n\t\tpkiFactKPI as long,\n\t\tSourceLine as long,\n\t\tLastUpdated as timestamp\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SourceIDs\nsource(output(\n\t\tpkiFactKPI as long,\n\t\tfkDate as date,\n\t\tBrewName as string,\n\t\tTimeLine as string,\n\t\tSubdivision as string,\n\t\tLine as string,\n\t\tBrewhouse as string,\n\t\tLocationLookup as string,\n\t\tMetricName as string,\n\t\tSourceLine as long,\n\t\tLastUpdated as timestamp\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> FactLookup\nsource(output(\n\t\tpkiMetric as long,\n\t\tMetricLU as string,\n\t\tCheckCount as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> MetricLookup\nsource(output(\n\t\tSiteName as string,\n\t\tSiteLookup as string,\n\t\tfkSite as long\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SIteLookup\nsource(output(\n\t\tpkiLocation as long,\n\t\tDivision as string,\n\t\tSubdivision as string,\n\t\tLine as string,\n\t\tBrewhouse as string,\n\t\tLocationLookup as string,\n\t\tCheckCount as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> LocationLookup\nsource(output(\n\t\tpkiTimeLine as integer,\n\t\tTimeLine as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> TimeLineLookup\nsource(output(\n\t\tpkiPackLine as long,\n\t\tfkSite as long,\n\t\tLineName as string,\n\t\tCheckCount as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> PackLineLookup\nsource(output(\n\t\tpkiBrewhouse as long,\n\t\tfkSite as long,\n\t\tBrewhouseName as string,\n\t\tCheckCount as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> BrewhouseLookup\nsource(output(\n\t\tpkiFactKPI as long,\n\t\tfkDate as date,\n\t\tfkSite as long,\n\t\tfkLocation as long,\n\t\tfkPackLine as long,\n\t\tfkBrewhouse as long,\n\t\tfkMetric as long,\n\t\tfkDomain as integer,\n\t\tfkTimeLine as integer,\n\t\tValue as double,\n\t\tWeightingFactor as double,\n\t\tTarget as double,\n\t\tTargetWeightingFactor as double,\n\t\tSourceLine as long,\n\t\tfkBatch as long,\n\t\tLastUpdated as timestamp,\n\t\tDisable as boolean\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> FactCopy\nInputHash, SourceIDs exists(StagingTable@SourceLine == SourceIDs@SourceLine,\n\tnegate:false,\n\tbroadcast: 'auto')~> UpdateRecords\nFactLookup derive(hashExisting = md5(toString(fkDate), BrewName, TimeLine, Line, Brewhouse, MetricName)) ~> ExistingHash\nSelect6 alterRow(updateIf(true())) ~> MarkUpdate1\nStagingTable derive(TMTimeLine = (trim(TimeLine) == 'MTD') || (trim(TimeLine) == 'YTD'),\n\t\tInputHash = md5(toString(PeriodDate), BrewName, TimeLine, Line, Brewhouse, MetricName),\n\t\tLocLookup1 = lower(trim(Area) + trim(coalesce(Line, '')) + trim(coalesce(Brewhouse, ''))),\n\t\tLineLookup = toString(SiteLookupCache#lookup(BrewName).fkSite) + '|' + Line,\n\t\tBrewhouseLookup = toString(SiteLookupCache#lookup(BrewName).fkSite) + '|' + Brewhouse,\n\t\tfkDate = PeriodDate) ~> InputHash\nInputHash, SourceIDs exists(StagingTable@SourceLine == SourceIDs@SourceLine,\n\tnegate:true,\n\tbroadcast: 'auto')~> NewRecords\nNewRecords split((trim(TimeLine) == \"MTD\") || (trim(TimeLine) == \"WTD\"),\n\tdisjoint: false) ~> SplitTimeLines@(MTDWTDTimeLines, DAYTimeLine)\nConditionalSplit1@FuzzyMatched alterRow(updateIf(true())) ~> MarkUpdate2\nSplitTimeLines@MTDWTDTimeLines, ExistingHash lookup(InputHash == hashExisting,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> Lookup1\nMarkUpdate1 select(mapColumn(\n\t\tpkiFactKPI,\n\t\tLastUpdated,\n\t\tValue\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Select1\nMarkUpdate2 select(mapColumn(\n\t\tpkiFactKPI,\n\t\tSourceLine,\n\t\tLastUpdated,\n\t\tValue\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Select2\nFactLookup select(mapColumn(\n\t\tpkiFactKPI,\n\t\tfkDate,\n\t\tBrewName,\n\t\tTimeLine,\n\t\tSubdivision,\n\t\tLine,\n\t\tBrewhouse,\n\t\tLocationLookup,\n\t\tMetricName,\n\t\tSourceLine,\n\t\tLastUpdated\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> KeyFromSourceline\nUpdateRecords, FactCopy lookup(StagingTable@SourceLine == FactCopy@SourceLine,\n\tmultiple: true,\n\tbroadcast: 'auto',\n\tpickup: 'any')~> LookupCurrent\nSplitTimeLines@DAYTimeLine derive(fkSite = SiteLookupCache#lookup(BrewName).fkSite,\n\t\tfkMetric = MetricLookupCache#lookup(MetricName).fkMetric,\n\t\tfkLocation = LocationCache#lookup(LocLookup1).fkLocation,\n\t\tfkTimeLine = TimeLineCache#lookup(TimeLine).fkTimeLine,\n\t\tfkPackLine = PackLineCache#lookup(LineLookup).fkPackLine,\n\t\tfkBrewhouse = BrewhouseCache#lookup(BrewhouseLookup).fkBrewhouse,\n\t\tfkDomain = 1,\n\t\tfkBatchL = toLong(0),\n\t\tWeightingFactor = toDouble(0),\n\t\tTarget = toDouble(0),\n\t\tTargetWeightingFactor = toDouble(0),\n\t\tDisable = false()) ~> LookupKeys\nLocationLookup derive(LocLookup = lower(trim(Subdivision) + trim(coalesce(Line, '')) + trim(coalesce(Brewhouse, '')))) ~> LocLookup\nPackLineLookup derive(LineKey = toString(fkSite) + '|' + LineName) ~> PackLineKey\nBrewhouseLookup derive(BrewhouseKey = toString(fkSite) + '|' + BrewhouseName) ~> BrewhouseKey\nLookupKeys alterRow(insertIf(true())) ~> MarkInsert\nSelect3 split(InputHash == hashExisting,\n\tdisjoint: false) ~> ConditionalSplit1@(FuzzyMatched, FuzzyUnmatched)\nLookup1 select(mapColumn(\n\t\tBrewName = SplitTimeLines@MTDWTDTimeLines@BrewName,\n\t\tDateStarting,\n\t\tTimeLine = SplitTimeLines@MTDWTDTimeLines@TimeLine,\n\t\tFlowMeasure,\n\t\tSection,\n\t\tArea,\n\t\tValue,\n\t\tLine = SplitTimeLines@MTDWTDTimeLines@Line,\n\t\tBrewhouse = SplitTimeLines@MTDWTDTimeLines@Brewhouse,\n\t\tMetricName = SplitTimeLines@MTDWTDTimeLines@MetricName,\n\t\tPeriodDate,\n\t\tLastUpdated = SplitTimeLines@MTDWTDTimeLines@LastUpdated,\n\t\tfkBatchID,\n\t\tSourceLine = SplitTimeLines@MTDWTDTimeLines@SourceLine,\n\t\tInputHash,\n\t\tpkiFactKPI,\n\t\tfkDate = SplitTimeLines@MTDWTDTimeLines@fkDate,\n\t\thashExisting,\n\t\tLocLookup1,\n\t\tLineLookup,\n\t\tBrewhouseLookup\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select3\nConditionalSplit1@FuzzyUnmatched derive(fkSite = SiteLookupCache#lookup(BrewName).fkSite,\n\t\tfkMetric = MetricLookupCache#lookup(MetricName).fkMetric,\n\t\tfkLocation = LocationCache#lookup(LocLookup1).fkLocation,\n\t\tfkTimeLine = TimeLineCache#lookup(TimeLine).fkTimeLine,\n\t\tfkPackLine = PackLineCache#lookup(LineLookup).fkPackLine,\n\t\tfkBrewhouse = BrewhouseCache#lookup(BrewhouseLookup).fkBrewhouse,\n\t\tfkDomain = 1,\n\t\tfkBatchL = toLong(0),\n\t\tWeightingFactor = toDouble(0),\n\t\tTarget = toDouble(0),\n\t\tTargetWeightingFactor = toDouble(0),\n\t\tDisable = false()) ~> LookupKeys2\nLookupKeys2 alterRow(insertIf(true())) ~> MarkInsert1\nMarkInsert1 select(mapColumn(\n\t\tfkDate,\n\t\tfkSite,\n\t\tfkLocation,\n\t\tfkPackLine,\n\t\tfkBrewhouse,\n\t\tfkMetric,\n\t\tfkDomain,\n\t\tfkTimeLine,\n\t\tValue,\n\t\tWeightingFactor,\n\t\tTarget,\n\t\tTargetWeightingFactor,\n\t\tSourceLine,\n\t\tfkBatch = fkBatchL,\n\t\tLastUpdated,\n\t\tDisable\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Select4\nMarkInsert select(mapColumn(\n\t\tfkDate,\n\t\tfkSite,\n\t\tfkLocation,\n\t\tfkPackLine,\n\t\tfkBrewhouse,\n\t\tfkMetric,\n\t\tfkDomain,\n\t\tfkTimeLine,\n\t\tValue,\n\t\tWeightingFactor,\n\t\tTarget,\n\t\tTargetWeightingFactor,\n\t\tSourceLine,\n\t\tfkBatch = fkBatchL,\n\t\tLastUpdated,\n\t\tDisable\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Select5\nLookupCurrent select(mapColumn(\n\t\tpkiFactKPI,\n\t\tfkDate = FactCopy@fkDate,\n\t\tfkSite,\n\t\tfkLocation,\n\t\tfkPackLine,\n\t\tfkBrewhouse,\n\t\tfkMetric,\n\t\tfkDomain,\n\t\tfkTimeLine,\n\t\tValue = StagingTable@Value,\n\t\tWeightingFactor,\n\t\tTarget,\n\t\tTargetWeightingFactor,\n\t\tSourceLine = FactCopy@SourceLine,\n\t\tfkBatch = fkBatchID,\n\t\tLastUpdated = StagingTable@LastUpdated,\n\t\tDisable\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Select6\nSelect1 sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tpkiFactKPI as long,\n\t\tfkDate as date,\n\t\tfkSite as long,\n\t\tfkLocation as long,\n\t\tfkPackLine as long,\n\t\tfkBrewhouse as long,\n\t\tfkMetric as long,\n\t\tfkDomain as integer,\n\t\tfkTimeLine as integer,\n\t\tValue as double,\n\t\tWeightingFactor as double,\n\t\tTarget as double,\n\t\tTargetWeightingFactor as double,\n\t\tSourceLine as long,\n\t\tfkBatch as long,\n\t\tLastUpdated as timestamp,\n\t\tDisable as boolean\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['pkiFactKPI'],\n\tskipKeyWrites:true,\n\tformat: 'table',\n\tsaveOrder: 2,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tpkiFactKPI,\n\t\tLastUpdated,\n\t\tValue\n\t)) ~> UpdateFact2\nSelect2 sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tpkiFactKPI as long,\n\t\tfkDate as date,\n\t\tfkSite as long,\n\t\tfkLocation as long,\n\t\tfkPackLine as long,\n\t\tfkBrewhouse as long,\n\t\tfkMetric as long,\n\t\tfkDomain as integer,\n\t\tfkTimeLine as integer,\n\t\tValue as double,\n\t\tWeightingFactor as double,\n\t\tTarget as double,\n\t\tTargetWeightingFactor as double,\n\t\tSourceLine as long,\n\t\tfkBatch as long,\n\t\tLastUpdated as timestamp,\n\t\tDisable as boolean\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['pkiFactKPI'],\n\tskipKeyWrites:true,\n\tformat: 'table',\n\tsaveOrder: 3,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tpkiFactKPI,\n\t\tValue,\n\t\tSourceLine,\n\t\tLastUpdated\n\t)) ~> UpdateFact1\nSelect5 sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tfkDate as date,\n\t\tfkSite as long,\n\t\tfkLocation as long,\n\t\tfkPackLine as long,\n\t\tfkBrewhouse as long,\n\t\tfkMetric as long,\n\t\tfkDomain as integer,\n\t\tfkTimeLine as integer,\n\t\tValue as double,\n\t\tWeightingFactor as double,\n\t\tTarget as double,\n\t\tTargetWeightingFactor as double,\n\t\tSourceLine as long,\n\t\tfkBatch as long,\n\t\tLastUpdated as timestamp,\n\t\tDisable as boolean\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tsaveOrder: 4,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tfkDate,\n\t\tfkSite,\n\t\tfkLocation,\n\t\tfkPackLine,\n\t\tfkBrewhouse,\n\t\tfkMetric,\n\t\tfkDomain,\n\t\tfkTimeLine,\n\t\tValue,\n\t\tWeightingFactor,\n\t\tTarget,\n\t\tTargetWeightingFactor,\n\t\tSourceLine,\n\t\tfkBatch,\n\t\tLastUpdated,\n\t\tDisable\n\t)) ~> InsertFactD\nSIteLookup sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tkeys:['SiteLookup'],\n\tstore: 'cache',\n\tformat: 'inline',\n\toutput: false,\n\tsaveOrder: 1,\n\tmapColumn(\n\t\tSiteLookup,\n\t\tfkSite\n\t)) ~> SiteLookupCache\nMetricLookup sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tkeys:['MetricLU'],\n\tstore: 'cache',\n\tformat: 'inline',\n\toutput: false,\n\tsaveOrder: (1),\n\tmapColumn(\n\t\tfkMetric = pkiMetric,\n\t\tMetricLU\n\t)) ~> MetricLookupCache\nLocLookup sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tkeys:['LocationLookup'],\n\tstore: 'cache',\n\tformat: 'inline',\n\toutput: false,\n\tsaveOrder: (1),\n\tmapColumn(\n\t\tfkLocation = pkiLocation,\n\t\tLocationLookup\n\t)) ~> LocationCache\nTimeLineLookup sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tkeys:['TimeLine'],\n\tstore: 'cache',\n\tformat: 'inline',\n\toutput: false,\n\tsaveOrder: 1,\n\tmapColumn(\n\t\tfkTimeLine = pkiTimeLine,\n\t\tTimeLine\n\t)) ~> TimeLineCache\nPackLineKey sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tkeys:['LineKey'],\n\tstore: 'cache',\n\tformat: 'inline',\n\toutput: false,\n\tsaveOrder: 1,\n\tmapColumn(\n\t\tfkPackLine = pkiPackLine,\n\t\tLineKey\n\t)) ~> PackLineCache\nBrewhouseKey sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tkeys:['BrewhouseKey'],\n\tstore: 'cache',\n\tformat: 'inline',\n\toutput: false,\n\tsaveOrder: 1,\n\tmapColumn(\n\t\tfkBrewhouse = pkiBrewhouse,\n\t\tBrewhouseKey\n\t)) ~> BrewhouseCache\nSelect4 sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tfkDate as date,\n\t\tfkSite as long,\n\t\tfkLocation as long,\n\t\tfkPackLine as long,\n\t\tfkBrewhouse as long,\n\t\tfkMetric as long,\n\t\tfkDomain as integer,\n\t\tfkTimeLine as integer,\n\t\tValue as double,\n\t\tWeightingFactor as double,\n\t\tTarget as double,\n\t\tTargetWeightingFactor as double,\n\t\tSourceLine as long,\n\t\tfkBatch as long,\n\t\tLastUpdated as timestamp,\n\t\tDisable as boolean\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tsaveOrder: 5,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tfkDate,\n\t\tfkSite,\n\t\tfkLocation,\n\t\tfkPackLine,\n\t\tfkBrewhouse,\n\t\tfkMetric,\n\t\tfkDomain,\n\t\tfkTimeLine,\n\t\tValue,\n\t\tWeightingFactor,\n\t\tTarget,\n\t\tTargetWeightingFactor,\n\t\tSourceLine,\n\t\tfkBatch,\n\t\tLastUpdated,\n\t\tDisable\n\t)) ~> InsertFactWM"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ODS_SDLevers')]",
				"[concat(variables('factoryId'), '/datasets/SourceIDLookup')]",
				"[concat(variables('factoryId'), '/datasets/REF_FactLookup')]",
				"[concat(variables('factoryId'), '/datasets/REF_MetricLookup')]",
				"[concat(variables('factoryId'), '/datasets/REF_SiteLookup')]",
				"[concat(variables('factoryId'), '/datasets/REF_LocationLookup')]",
				"[concat(variables('factoryId'), '/datasets/REF_TimeLineLookup')]",
				"[concat(variables('factoryId'), '/datasets/REF_PackLineLookup')]",
				"[concat(variables('factoryId'), '/datasets/REF_BrewhouseLookup')]",
				"[concat(variables('factoryId'), '/datasets/DWFactKPIRead')]",
				"[concat(variables('factoryId'), '/datasets/DWFactKPI')]",
				"[concat(variables('factoryId'), '/datasets/DWFactKPIStaging')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DFFactKPI_ETL2_copy4')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Fact DF"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ODS_SDLevers",
								"type": "DatasetReference"
							},
							"name": "StagingTable"
						},
						{
							"dataset": {
								"referenceName": "SourceIDLookup",
								"type": "DatasetReference"
							},
							"name": "SourceIDs"
						},
						{
							"dataset": {
								"referenceName": "REF_FactLookup",
								"type": "DatasetReference"
							},
							"name": "FactLookup"
						},
						{
							"dataset": {
								"referenceName": "REF_MetricLookup",
								"type": "DatasetReference"
							},
							"name": "MetricLookup"
						},
						{
							"dataset": {
								"referenceName": "REF_SiteLookup",
								"type": "DatasetReference"
							},
							"name": "SIteLookup"
						},
						{
							"dataset": {
								"referenceName": "REF_LocationLookup",
								"type": "DatasetReference"
							},
							"name": "LocationLookup"
						},
						{
							"dataset": {
								"referenceName": "REF_TimeLineLookup",
								"type": "DatasetReference"
							},
							"name": "TimeLineLookup"
						},
						{
							"dataset": {
								"referenceName": "REF_PackLineLookup",
								"type": "DatasetReference"
							},
							"name": "PackLineLookup"
						},
						{
							"dataset": {
								"referenceName": "REF_BrewhouseLookup",
								"type": "DatasetReference"
							},
							"name": "BrewhouseLookup"
						},
						{
							"dataset": {
								"referenceName": "DWFactKPIRead",
								"type": "DatasetReference"
							},
							"name": "FactCopy"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DWFactKPI",
								"type": "DatasetReference"
							},
							"name": "UpdateFact2",
							"description": "Update DWFactKPI"
						},
						{
							"dataset": {
								"referenceName": "DWFactKPI",
								"type": "DatasetReference"
							},
							"name": "UpdateFact1",
							"description": "Update DWFactKPI"
						},
						{
							"dataset": {
								"referenceName": "DWFactKPIStaging",
								"type": "DatasetReference"
							},
							"name": "InsertFactD"
						},
						{
							"name": "SiteLookupCache"
						},
						{
							"name": "MetricLookupCache"
						},
						{
							"name": "LocationCache"
						},
						{
							"name": "TimeLineCache"
						},
						{
							"name": "PackLineCache"
						},
						{
							"name": "BrewhouseCache"
						},
						{
							"dataset": {
								"referenceName": "DWFactKPIStaging",
								"type": "DatasetReference"
							},
							"name": "InsertFactWM"
						}
					],
					"transformations": [
						{
							"name": "UpdateRecords",
							"description": "Input rows that match on SourceLine"
						},
						{
							"name": "ExistingHash",
							"description": "Hash of characterising fields to match WTD and MTD elements"
						},
						{
							"name": "MarkUpdate1",
							"description": "Update the value and lastupdated date"
						},
						{
							"name": "InputHash",
							"description": "Hash of elements to identify similar records"
						},
						{
							"name": "NewRecords",
							"description": "Input rows that do not match on SourceLine\nNOTE Exists does not join the subquery"
						},
						{
							"name": "SplitTimeLines",
							"description": "Split MTD and WTD records from DAY records"
						},
						{
							"name": "MarkUpdate2",
							"description": "Update the value, sourceline and lastupdated date"
						},
						{
							"name": "Lookup1"
						},
						{
							"name": "Select1",
							"description": "pki and new value and lastupdated"
						},
						{
							"name": "Select2",
							"description": "PKI, and new sourceline, lastupdated and value"
						},
						{
							"name": "KeyFromSourceline",
							"description": "Look up the fact pki from the source line for matching source lines"
						},
						{
							"name": "LookupCurrent",
							"description": "Lookup primary key for matched record from sourceline"
						},
						{
							"name": "LookupKeys"
						},
						{
							"name": "LocLookup"
						},
						{
							"name": "PackLineKey"
						},
						{
							"name": "BrewhouseKey"
						},
						{
							"name": "MarkInsert"
						},
						{
							"name": "ConditionalSplit1"
						},
						{
							"name": "Select3"
						},
						{
							"name": "LookupKeys2"
						},
						{
							"name": "MarkInsert1"
						},
						{
							"name": "Select4"
						},
						{
							"name": "Select5"
						},
						{
							"name": "Select6"
						}
					],
					"script": "source(output(\n\t\tBrewName as string,\n\t\tDateStarting as date,\n\t\tTimeLine as string,\n\t\tFlowMeasure as string,\n\t\tSection as string,\n\t\tArea as string,\n\t\tValue as double,\n\t\tLine as string,\n\t\tBrewhouse as string,\n\t\tMetricName as string,\n\t\tPeriodDate as date,\n\t\tLastUpdated as timestamp,\n\t\tpkiSDLevers as long,\n\t\tfkBatchID as integer,\n\t\tSourceLine as long\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> StagingTable\nsource(output(\n\t\tpkiFactKPI as long,\n\t\tSourceLine as long,\n\t\tLastUpdated as timestamp\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SourceIDs\nsource(output(\n\t\tpkiFactKPI as long,\n\t\tfkDate as date,\n\t\tBrewName as string,\n\t\tTimeLine as string,\n\t\tSubdivision as string,\n\t\tLine as string,\n\t\tBrewhouse as string,\n\t\tLocationLookup as string,\n\t\tMetricName as string,\n\t\tSourceLine as long,\n\t\tLastUpdated as timestamp\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> FactLookup\nsource(output(\n\t\tpkiMetric as long,\n\t\tMetricLU as string,\n\t\tCheckCount as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> MetricLookup\nsource(output(\n\t\tSiteName as string,\n\t\tSiteLookup as string,\n\t\tfkSite as long\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SIteLookup\nsource(output(\n\t\tpkiLocation as long,\n\t\tDivision as string,\n\t\tSubdivision as string,\n\t\tLine as string,\n\t\tBrewhouse as string,\n\t\tLocationLookup as string,\n\t\tCheckCount as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> LocationLookup\nsource(output(\n\t\tpkiTimeLine as integer,\n\t\tTimeLine as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> TimeLineLookup\nsource(output(\n\t\tpkiPackLine as long,\n\t\tfkSite as long,\n\t\tLineName as string,\n\t\tCheckCount as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> PackLineLookup\nsource(output(\n\t\tpkiBrewhouse as long,\n\t\tfkSite as long,\n\t\tBrewhouseName as string,\n\t\tCheckCount as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> BrewhouseLookup\nsource(output(\n\t\tpkiFactKPI as long,\n\t\tfkDate as date,\n\t\tfkSite as long,\n\t\tfkLocation as long,\n\t\tfkPackLine as long,\n\t\tfkBrewhouse as long,\n\t\tfkMetric as long,\n\t\tfkDomain as integer,\n\t\tfkTimeLine as integer,\n\t\tValue as double,\n\t\tWeightingFactor as double,\n\t\tTarget as double,\n\t\tTargetWeightingFactor as double,\n\t\tSourceLine as long,\n\t\tfkBatch as long,\n\t\tLastUpdated as timestamp,\n\t\tDisable as boolean\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> FactCopy\nInputHash, SourceIDs exists(StagingTable@SourceLine == SourceIDs@SourceLine,\n\tnegate:false,\n\tbroadcast: 'auto')~> UpdateRecords\nFactLookup derive(hashExisting = md5(toString(fkDate), BrewName, TimeLine, Line, Brewhouse, MetricName)) ~> ExistingHash\nSelect6 alterRow(updateIf(true())) ~> MarkUpdate1\nStagingTable derive(TMTimeLine = (trim(TimeLine) == 'MTD') || (trim(TimeLine) == 'YTD'),\n\t\tInputHash = md5(toString(PeriodDate), BrewName, TimeLine, Line, Brewhouse, MetricName),\n\t\tLocLookup1 = lower(trim(Area) + trim(coalesce(Line, '')) + trim(coalesce(Brewhouse, ''))),\n\t\tLineLookup = toString(SiteLookupCache#lookup(BrewName).fkSite) + '|' + Line,\n\t\tBrewhouseLookup = toString(SiteLookupCache#lookup(BrewName).fkSite) + '|' + Brewhouse,\n\t\tfkDate = PeriodDate) ~> InputHash\nInputHash, SourceIDs exists(StagingTable@SourceLine == SourceIDs@SourceLine,\n\tnegate:true,\n\tbroadcast: 'auto')~> NewRecords\nNewRecords split((trim(TimeLine) == \"MTD\") || (trim(TimeLine) == \"WTD\"),\n\tdisjoint: false) ~> SplitTimeLines@(MTDWTDTimeLines, DAYTimeLine)\nConditionalSplit1@FuzzyMatched alterRow(updateIf(true())) ~> MarkUpdate2\nSplitTimeLines@MTDWTDTimeLines, ExistingHash lookup(InputHash == hashExisting,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> Lookup1\nMarkUpdate1 select(mapColumn(\n\t\tpkiFactKPI,\n\t\tLastUpdated,\n\t\tValue\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Select1\nMarkUpdate2 select(mapColumn(\n\t\tpkiFactKPI,\n\t\tSourceLine,\n\t\tLastUpdated,\n\t\tValue\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Select2\nFactLookup select(mapColumn(\n\t\tpkiFactKPI,\n\t\tfkDate,\n\t\tBrewName,\n\t\tTimeLine,\n\t\tSubdivision,\n\t\tLine,\n\t\tBrewhouse,\n\t\tLocationLookup,\n\t\tMetricName,\n\t\tSourceLine,\n\t\tLastUpdated\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> KeyFromSourceline\nUpdateRecords, FactCopy lookup(StagingTable@SourceLine == FactCopy@SourceLine,\n\tmultiple: true,\n\tbroadcast: 'auto',\n\tpickup: 'any')~> LookupCurrent\nSplitTimeLines@DAYTimeLine derive(fkSite = SiteLookupCache#lookup(BrewName).fkSite,\n\t\tfkMetric = MetricLookupCache#lookup(MetricName).fkMetric,\n\t\tfkLocation = LocationCache#lookup(LocLookup1).fkLocation,\n\t\tfkTimeLine = TimeLineCache#lookup(TimeLine).fkTimeLine,\n\t\tfkPackLine = PackLineCache#lookup(LineLookup).fkPackLine,\n\t\tfkBrewhouse = BrewhouseCache#lookup(BrewhouseLookup).fkBrewhouse,\n\t\tfkDomain = 1,\n\t\tfkBatchL = toLong(0),\n\t\tWeightingFactor = toDouble(0),\n\t\tTarget = toDouble(0),\n\t\tTargetWeightingFactor = toDouble(0),\n\t\tDisable = false()) ~> LookupKeys\nLocationLookup derive(LocLookup = lower(trim(Subdivision) + trim(coalesce(Line, '')) + trim(coalesce(Brewhouse, '')))) ~> LocLookup\nPackLineLookup derive(LineKey = toString(fkSite) + '|' + LineName) ~> PackLineKey\nBrewhouseLookup derive(BrewhouseKey = toString(fkSite) + '|' + BrewhouseName) ~> BrewhouseKey\nLookupKeys alterRow(insertIf(true())) ~> MarkInsert\nSelect3 split(InputHash == hashExisting,\n\tdisjoint: false) ~> ConditionalSplit1@(FuzzyMatched, FuzzyUnmatched)\nLookup1 select(mapColumn(\n\t\tBrewName = SplitTimeLines@MTDWTDTimeLines@BrewName,\n\t\tDateStarting,\n\t\tTimeLine = SplitTimeLines@MTDWTDTimeLines@TimeLine,\n\t\tFlowMeasure,\n\t\tSection,\n\t\tArea,\n\t\tValue,\n\t\tLine = SplitTimeLines@MTDWTDTimeLines@Line,\n\t\tBrewhouse = SplitTimeLines@MTDWTDTimeLines@Brewhouse,\n\t\tMetricName = SplitTimeLines@MTDWTDTimeLines@MetricName,\n\t\tPeriodDate,\n\t\tLastUpdated = SplitTimeLines@MTDWTDTimeLines@LastUpdated,\n\t\tfkBatchID,\n\t\tSourceLine = SplitTimeLines@MTDWTDTimeLines@SourceLine,\n\t\tInputHash,\n\t\tpkiFactKPI,\n\t\tfkDate = SplitTimeLines@MTDWTDTimeLines@fkDate,\n\t\thashExisting,\n\t\tLocLookup1,\n\t\tLineLookup,\n\t\tBrewhouseLookup\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select3\nConditionalSplit1@FuzzyUnmatched derive(fkSite = SiteLookupCache#lookup(BrewName).fkSite,\n\t\tfkMetric = MetricLookupCache#lookup(MetricName).fkMetric,\n\t\tfkLocation = LocationCache#lookup(LocLookup1).fkLocation,\n\t\tfkTimeLine = TimeLineCache#lookup(TimeLine).fkTimeLine,\n\t\tfkPackLine = PackLineCache#lookup(LineLookup).fkPackLine,\n\t\tfkBrewhouse = BrewhouseCache#lookup(BrewhouseLookup).fkBrewhouse,\n\t\tfkDomain = 1,\n\t\tfkBatchL = toLong(0),\n\t\tWeightingFactor = toDouble(0),\n\t\tTarget = toDouble(0),\n\t\tTargetWeightingFactor = toDouble(0),\n\t\tDisable = false()) ~> LookupKeys2\nLookupKeys2 alterRow(insertIf(true())) ~> MarkInsert1\nMarkInsert1 select(mapColumn(\n\t\tfkDate,\n\t\tfkSite,\n\t\tfkLocation,\n\t\tfkPackLine,\n\t\tfkBrewhouse,\n\t\tfkMetric,\n\t\tfkDomain,\n\t\tfkTimeLine,\n\t\tValue,\n\t\tWeightingFactor,\n\t\tTarget,\n\t\tTargetWeightingFactor,\n\t\tSourceLine,\n\t\tfkBatch = fkBatchL,\n\t\tLastUpdated,\n\t\tDisable\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Select4\nMarkInsert select(mapColumn(\n\t\tfkDate,\n\t\tfkSite,\n\t\tfkLocation,\n\t\tfkPackLine,\n\t\tfkBrewhouse,\n\t\tfkMetric,\n\t\tfkDomain,\n\t\tfkTimeLine,\n\t\tValue,\n\t\tWeightingFactor,\n\t\tTarget,\n\t\tTargetWeightingFactor,\n\t\tSourceLine,\n\t\tfkBatch = fkBatchL,\n\t\tLastUpdated,\n\t\tDisable\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Select5\nLookupCurrent select(mapColumn(\n\t\tpkiFactKPI,\n\t\tfkDate = FactCopy@fkDate,\n\t\tfkSite,\n\t\tfkLocation,\n\t\tfkPackLine,\n\t\tfkBrewhouse,\n\t\tfkMetric,\n\t\tfkDomain,\n\t\tfkTimeLine,\n\t\tValue = StagingTable@Value,\n\t\tWeightingFactor,\n\t\tTarget,\n\t\tTargetWeightingFactor,\n\t\tSourceLine = FactCopy@SourceLine,\n\t\tfkBatch = fkBatchID,\n\t\tLastUpdated = StagingTable@LastUpdated,\n\t\tDisable\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Select6\nSelect1 sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tpkiFactKPI as long,\n\t\tfkDate as date,\n\t\tfkSite as long,\n\t\tfkLocation as long,\n\t\tfkPackLine as long,\n\t\tfkBrewhouse as long,\n\t\tfkMetric as long,\n\t\tfkDomain as integer,\n\t\tfkTimeLine as integer,\n\t\tValue as double,\n\t\tWeightingFactor as double,\n\t\tTarget as double,\n\t\tTargetWeightingFactor as double,\n\t\tSourceLine as long,\n\t\tfkBatch as long,\n\t\tLastUpdated as timestamp,\n\t\tDisable as boolean\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['pkiFactKPI'],\n\tskipKeyWrites:true,\n\tformat: 'table',\n\tsaveOrder: 2,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tpkiFactKPI,\n\t\tLastUpdated,\n\t\tValue\n\t)) ~> UpdateFact2\nSelect2 sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tpkiFactKPI as long,\n\t\tfkDate as date,\n\t\tfkSite as long,\n\t\tfkLocation as long,\n\t\tfkPackLine as long,\n\t\tfkBrewhouse as long,\n\t\tfkMetric as long,\n\t\tfkDomain as integer,\n\t\tfkTimeLine as integer,\n\t\tValue as double,\n\t\tWeightingFactor as double,\n\t\tTarget as double,\n\t\tTargetWeightingFactor as double,\n\t\tSourceLine as long,\n\t\tfkBatch as long,\n\t\tLastUpdated as timestamp,\n\t\tDisable as boolean\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['pkiFactKPI'],\n\tskipKeyWrites:true,\n\tformat: 'table',\n\tsaveOrder: 3,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tpkiFactKPI,\n\t\tValue,\n\t\tSourceLine,\n\t\tLastUpdated\n\t)) ~> UpdateFact1\nSelect5 sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tfkDate as date,\n\t\tfkSite as long,\n\t\tfkLocation as long,\n\t\tfkPackLine as long,\n\t\tfkBrewhouse as long,\n\t\tfkMetric as long,\n\t\tfkDomain as integer,\n\t\tfkTimeLine as integer,\n\t\tValue as double,\n\t\tWeightingFactor as double,\n\t\tTarget as double,\n\t\tTargetWeightingFactor as double,\n\t\tSourceLine as long,\n\t\tfkBatch as long,\n\t\tLastUpdated as timestamp,\n\t\tDisable as boolean\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tsaveOrder: 4,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tfkDate,\n\t\tfkSite,\n\t\tfkLocation,\n\t\tfkPackLine,\n\t\tfkBrewhouse,\n\t\tfkMetric,\n\t\tfkDomain,\n\t\tfkTimeLine,\n\t\tValue,\n\t\tWeightingFactor,\n\t\tTarget,\n\t\tTargetWeightingFactor,\n\t\tSourceLine,\n\t\tfkBatch,\n\t\tLastUpdated,\n\t\tDisable\n\t)) ~> InsertFactD\nSIteLookup sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tkeys:['SiteLookup'],\n\tstore: 'cache',\n\tformat: 'inline',\n\toutput: false,\n\tsaveOrder: 1,\n\tmapColumn(\n\t\tSiteLookup,\n\t\tfkSite\n\t)) ~> SiteLookupCache\nMetricLookup sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tkeys:['MetricLU'],\n\tstore: 'cache',\n\tformat: 'inline',\n\toutput: false,\n\tsaveOrder: (1),\n\tmapColumn(\n\t\tfkMetric = pkiMetric,\n\t\tMetricLU\n\t)) ~> MetricLookupCache\nLocLookup sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tkeys:['LocationLookup'],\n\tstore: 'cache',\n\tformat: 'inline',\n\toutput: false,\n\tsaveOrder: (1),\n\tmapColumn(\n\t\tfkLocation = pkiLocation,\n\t\tLocationLookup\n\t)) ~> LocationCache\nTimeLineLookup sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tkeys:['TimeLine'],\n\tstore: 'cache',\n\tformat: 'inline',\n\toutput: false,\n\tsaveOrder: 1,\n\tmapColumn(\n\t\tfkTimeLine = pkiTimeLine,\n\t\tTimeLine\n\t)) ~> TimeLineCache\nPackLineKey sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tkeys:['LineKey'],\n\tstore: 'cache',\n\tformat: 'inline',\n\toutput: false,\n\tsaveOrder: 1,\n\tmapColumn(\n\t\tfkPackLine = pkiPackLine,\n\t\tLineKey\n\t)) ~> PackLineCache\nBrewhouseKey sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tkeys:['BrewhouseKey'],\n\tstore: 'cache',\n\tformat: 'inline',\n\toutput: false,\n\tsaveOrder: 1,\n\tmapColumn(\n\t\tfkBrewhouse = pkiBrewhouse,\n\t\tBrewhouseKey\n\t)) ~> BrewhouseCache\nSelect4 sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tfkDate as date,\n\t\tfkSite as long,\n\t\tfkLocation as long,\n\t\tfkPackLine as long,\n\t\tfkBrewhouse as long,\n\t\tfkMetric as long,\n\t\tfkDomain as integer,\n\t\tfkTimeLine as integer,\n\t\tValue as double,\n\t\tWeightingFactor as double,\n\t\tTarget as double,\n\t\tTargetWeightingFactor as double,\n\t\tSourceLine as long,\n\t\tfkBatch as long,\n\t\tLastUpdated as timestamp,\n\t\tDisable as boolean\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tsaveOrder: 5,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tfkDate,\n\t\tfkSite,\n\t\tfkLocation,\n\t\tfkPackLine,\n\t\tfkBrewhouse,\n\t\tfkMetric,\n\t\tfkDomain,\n\t\tfkTimeLine,\n\t\tValue,\n\t\tWeightingFactor,\n\t\tTarget,\n\t\tTargetWeightingFactor,\n\t\tSourceLine,\n\t\tfkBatch,\n\t\tLastUpdated,\n\t\tDisable\n\t)) ~> InsertFactWM"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ODS_SDLevers')]",
				"[concat(variables('factoryId'), '/datasets/SourceIDLookup')]",
				"[concat(variables('factoryId'), '/datasets/REF_FactLookup')]",
				"[concat(variables('factoryId'), '/datasets/REF_MetricLookup')]",
				"[concat(variables('factoryId'), '/datasets/REF_SiteLookup')]",
				"[concat(variables('factoryId'), '/datasets/REF_LocationLookup')]",
				"[concat(variables('factoryId'), '/datasets/REF_TimeLineLookup')]",
				"[concat(variables('factoryId'), '/datasets/REF_PackLineLookup')]",
				"[concat(variables('factoryId'), '/datasets/REF_BrewhouseLookup')]",
				"[concat(variables('factoryId'), '/datasets/DWFactKPIRead')]",
				"[concat(variables('factoryId'), '/datasets/DWFactKPI')]",
				"[concat(variables('factoryId'), '/datasets/DWFactKPIStaging')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PowerQuery1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "WranglingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "dboTestTable1",
							"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> dboTestTable1",
							"dataset": {
								"referenceName": "dboTestTable1",
								"type": "DatasetReference"
							}
						}
					],
					"script": "section Section1;\r\nshared dboTestTable1 = let\r\n  AdfDoc = Sql.Database(\"supplydatastoreserver.database.windows.net\", \"SupplyDataStore\"),\r\n  InputTable = AdfDoc{[Schema = \"dbo\", Item = \"TestTable1\"]}[Data]\r\nin\r\n  InputTable;\r\nshared UserQuery = let\r\n  Source = dboTestTable1\r\nin\r\n  Source;\r\n"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dboTestTable1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TargetsETL2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ODS_TargetStaging",
								"type": "DatasetReference"
							},
							"name": "ODSTargets"
						},
						{
							"dataset": {
								"referenceName": "REF_TargetMapping",
								"type": "DatasetReference"
							},
							"name": "REFTargetMapping"
						},
						{
							"dataset": {
								"referenceName": "REF_SiteLookup",
								"type": "DatasetReference"
							},
							"name": "REFSite"
						},
						{
							"dataset": {
								"referenceName": "REF_Month",
								"type": "DatasetReference"
							},
							"name": "REFMonth"
						},
						{
							"dataset": {
								"referenceName": "REF_Year",
								"type": "DatasetReference"
							},
							"name": "REFYear"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DW_Targets",
								"type": "DatasetReference"
							},
							"name": "DWTargets"
						}
					],
					"transformations": [
						{
							"name": "TargetValue",
							"description": "Convert target to float"
						},
						{
							"name": "LookupMeasure",
							"description": "Lookup fkMeasure from REFTargetMapping"
						},
						{
							"name": "SplitMTDYTD",
							"description": "Split the stream into MTD and YTD groups to assign the Target to the correct field"
						},
						{
							"name": "MTDCalc",
							"description": "Assign the target (TargetF) to ValueMTD"
						},
						{
							"name": "YTDCalc",
							"description": "Assign the target (TargetF) to ValueYTD"
						},
						{
							"name": "Combine"
						},
						{
							"name": "Select1",
							"description": "Limit to active fields"
						},
						{
							"name": "LookupMonth"
						},
						{
							"name": "LookupYear"
						},
						{
							"name": "OtherFields",
							"description": "Creating the columns fkTimeLine, LastUpdated, fkDate"
						},
						{
							"name": "LookupSite"
						},
						{
							"name": "Select2"
						},
						{
							"name": "Select3"
						}
					],
					"script": "source(output(\n\t\tpkiTargetStaging as long,\n\t\tConcatenate as string,\n\t\t{BU Region} as string,\n\t\t{BU Region 2} as string,\n\t\tBURegion as string,\n\t\tCountry as string,\n\t\tPlant as string,\n\t\t{Plt Code} as string,\n\t\t{Fin Year} as string,\n\t\tMonth as string,\n\t\t{MTD/YTD} as string,\n\t\tVersion as string,\n\t\t{KPI Name} as string,\n\t\tTarget as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> ODSTargets\nsource(output(\n\t\tpkiTargetMapping as long,\n\t\tTargetSourceName as string,\n\t\tMeasureName as string,\n\t\tfkMeasure as long\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> REFTargetMapping\nsource(output(\n\t\tSiteName as string,\n\t\tSiteLookup as string,\n\t\tfkSite as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> REFSite\nsource(output(\n\t\tName as string,\n\t\tMonthN as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> REFMonth\nsource(output(\n\t\tFYear as string,\n\t\tNYear as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> REFYear\nSelect1 derive(TargetF = toFloat(Target),\n\t\tMeasureLookup = trim({KPI Name})) ~> TargetValue\nTargetValue, REFTargetMapping lookup(MeasureLookup == TargetSourceName,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupMeasure\nLookupMeasure split({MTD/YTD} == 'MTD',\n\t{MTD/YTD} == 'YTD',\n\tdisjoint: true) ~> SplitMTDYTD@(MTD, YTD)\nSplitMTDYTD@MTD derive(ValueMTD = TargetF,\n\t\tSiteLookup = lower(Plant)) ~> MTDCalc\nSplitMTDYTD@YTD derive(ValueYTD = TargetF) ~> YTDCalc\nMTDCalc, YTDCalc join(SplitMTDYTD@MTD@Plant == SplitMTDYTD@YTD@Plant\n\t&& SplitMTDYTD@MTD@{Fin Year} == SplitMTDYTD@YTD@{Fin Year}\n\t&& SplitMTDYTD@MTD@Month == SplitMTDYTD@YTD@Month\n\t&& SplitMTDYTD@MTD@{KPI Name} == SplitMTDYTD@YTD@{KPI Name}\n\t&& SplitMTDYTD@MTD@fkMeasure == SplitMTDYTD@YTD@fkMeasure,\n\tjoinType:'inner',\n\tbroadcast: 'left')~> Combine\nODSTargets select(mapColumn(\n\t\tPlant,\n\t\t{Fin Year},\n\t\tMonth,\n\t\t{MTD/YTD},\n\t\t{KPI Name},\n\t\tTarget\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Select1\nLookupSite, REFMonth lookup(Month == Name,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupMonth\nLookupMonth, REFYear lookup({Fin Year} == FYear,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupYear\nSelect3 derive(fkTimeline = 3,\n\t\tLastUpdated = currentTimestamp(),\n\t\tfkDate = toDate(addDays(addMonths(toTimestamp(toString(NYear) + '.01.01', 'yyyy.MM.dd'), MonthN), -1))) ~> OtherFields\nSelect2, REFSite lookup(Select2@SiteLookup == REFSite@SiteLookup,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupSite\nCombine select(mapColumn(\n\t\tPlant = SplitMTDYTD@MTD@Plant,\n\t\t{Fin Year} = SplitMTDYTD@MTD@{Fin Year},\n\t\tMonth = SplitMTDYTD@MTD@Month,\n\t\t{KPI Name} = SplitMTDYTD@MTD@{KPI Name},\n\t\tfkMeasure = SplitMTDYTD@MTD@fkMeasure,\n\t\tValueMTD,\n\t\tValueYTD,\n\t\tSiteLookup\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Select2\nLookupYear select(mapColumn(\n\t\tfkMeasure,\n\t\tValueMTD,\n\t\tValueYTD,\n\t\tfkSite,\n\t\tMonthN,\n\t\tNYear\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Select3\nOtherFields sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tpkiTargets as long,\n\t\tfkMeasure as long,\n\t\tfkSite as long,\n\t\tfkDate as date,\n\t\tfkTimeLine as integer,\n\t\tValueMTD as double,\n\t\tValueYTD as double,\n\t\tLastUpdated as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tdateFormat:'yyyy-MM-dd',\n\ttimestampFormat:'yyyy.MM.dd HH:mm:ss',\n\terrorHandlingOption: 'allErrors',\n\ttransactionCommit: 'single',\n\treportSuccessOnError: false,\n\tmapColumn(\n\t\tValueMTD,\n\t\tValueYTD,\n\t\tfkMeasure,\n\t\tfkTimeLine = fkTimeline,\n\t\tfkDate,\n\t\tLastUpdated,\n\t\tfkSite\n\t)) ~> DWTargets"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ODS_TargetStaging')]",
				"[concat(variables('factoryId'), '/datasets/REF_TargetMapping')]",
				"[concat(variables('factoryId'), '/datasets/REF_SiteLookup')]",
				"[concat(variables('factoryId'), '/datasets/REF_Month')]",
				"[concat(variables('factoryId'), '/datasets/REF_Year')]",
				"[concat(variables('factoryId'), '/datasets/DW_Targets')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TargetsETL2V2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dboTestTable1",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "dboTestTable2",
								"type": "DatasetReference"
							},
							"name": "sinka"
						}
					],
					"transformations": [],
					"script": "source(output(\n\t\tpki as long,\n\t\tFinYear as string,\n\t\tMonth as string,\n\t\tfkDate as date,\n\t\tfkDateTime as timestamp,\n\t\tSite as string,\n\t\tfkSite as long,\n\t\tfkTimeLine as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> source1\nsource1 sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tpki as long,\n\t\tFinYear as string,\n\t\tMonth as string,\n\t\tfkDate as date,\n\t\tfkDateTime as timestamp,\n\t\tSite as string,\n\t\tfkSite as long,\n\t\tfkTimeLine as integer\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sinka"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dboTestTable1')]",
				"[concat(variables('factoryId'), '/datasets/dboTestTable2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TargetsETL2_Clone')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ODS_TargetStaging",
								"type": "DatasetReference"
							},
							"name": "ODSTargets"
						},
						{
							"dataset": {
								"referenceName": "REF_TargetMapping",
								"type": "DatasetReference"
							},
							"name": "REFTargetMapping"
						},
						{
							"dataset": {
								"referenceName": "REF_SiteLookup",
								"type": "DatasetReference"
							},
							"name": "REFSite"
						},
						{
							"dataset": {
								"referenceName": "REF_Month",
								"type": "DatasetReference"
							},
							"name": "REFMonth"
						},
						{
							"dataset": {
								"referenceName": "REF_Year",
								"type": "DatasetReference"
							},
							"name": "REFYear"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DW_Targets",
								"type": "DatasetReference"
							},
							"name": "DWTargets"
						},
						{
							"dataset": {
								"referenceName": "DebugOutput",
								"type": "DatasetReference"
							},
							"name": "DebugSink"
						}
					],
					"transformations": [
						{
							"name": "TargetValue",
							"description": "Convert target to float"
						},
						{
							"name": "LookupMeasure",
							"description": "Lookup fkMeasure from REFTargetMapping"
						},
						{
							"name": "SplitMTDYTD",
							"description": "This leg gets YTD target values."
						},
						{
							"name": "MTDCalc"
						},
						{
							"name": "YTDCalc"
						},
						{
							"name": "Combine"
						},
						{
							"name": "Select1",
							"description": "Limit to active fields"
						},
						{
							"name": "LookupMonth"
						},
						{
							"name": "LookupYear"
						},
						{
							"name": "OtherFields",
							"description": "Creating the columns fkTimeLine, LastUpdated, fkDate"
						},
						{
							"name": "LookupSite"
						},
						{
							"name": "Select2"
						},
						{
							"name": "Select3"
						},
						{
							"name": "SelectDebug"
						}
					],
					"script": "source(output(\n\t\tpkiTargetStaging as long,\n\t\tConcatenate as string,\n\t\t{BU Region} as string,\n\t\t{BU Region 2} as string,\n\t\tBURegion as string,\n\t\tCountry as string,\n\t\tPlant as string,\n\t\t{Plt Code} as string,\n\t\t{Fin Year} as string,\n\t\tMonth as string,\n\t\t{MTD/YTD} as string,\n\t\tVersion as string,\n\t\t{KPI Name} as string,\n\t\tTarget as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> ODSTargets\nsource(output(\n\t\tpkiTargetMapping as long,\n\t\tTargetSourceName as string,\n\t\tMeasureName as string,\n\t\tfkMeasure as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> REFTargetMapping\nsource(output(\n\t\tSiteName as string,\n\t\tSiteLookup as string,\n\t\tfkSite as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> REFSite\nsource(output(\n\t\tName as string,\n\t\tMonthN as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> REFMonth\nsource(output(\n\t\tFYear as string,\n\t\tNYear as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> REFYear\nSelect1 derive(TargetF = toFloat(Target)) ~> TargetValue\nTargetValue, REFTargetMapping lookup({KPI Name} == TargetSourceName,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupMeasure\nLookupMeasure split({MTD/YTD} == 'MTD',\n\t{MTD/YTD} == 'YTD',\n\tdisjoint: true) ~> SplitMTDYTD@(MTD, YTD)\nSplitMTDYTD@MTD derive(ValueMTD = TargetF) ~> MTDCalc\nSplitMTDYTD@YTD derive(ValueYTD = TargetF) ~> YTDCalc\nMTDCalc, YTDCalc join(SplitMTDYTD@MTD@Plant == SplitMTDYTD@YTD@Plant\n\t&& SplitMTDYTD@MTD@{Fin Year} == SplitMTDYTD@YTD@{Fin Year}\n\t&& SplitMTDYTD@MTD@Month == SplitMTDYTD@YTD@Month\n\t&& SplitMTDYTD@MTD@{KPI Name} == SplitMTDYTD@YTD@{KPI Name}\n\t&& SplitMTDYTD@MTD@fkMeasure == SplitMTDYTD@YTD@fkMeasure,\n\tjoinType:'inner',\n\tbroadcast: 'left')~> Combine\nODSTargets select(mapColumn(\n\t\tPlant,\n\t\t{Fin Year},\n\t\tMonth,\n\t\t{MTD/YTD},\n\t\t{KPI Name},\n\t\tTarget\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Select1\nLookupSite, REFMonth lookup(Month == Name,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupMonth\nLookupMonth, REFYear lookup({Fin Year} == FYear,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupYear\nSelect3 derive(fkTimeline = 3,\n\t\tLastUpdated = currentTimestamp(),\n\t\tfkDate = toDate(addDays(addMonths(toTimestamp(toString(NYear) + '.01.01', 'yyyy.MM.dd'), MonthN), -1))) ~> OtherFields\nSelect2, REFSite lookup(Plant == SiteLookup,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupSite\nCombine select(mapColumn(\n\t\tPlant = SplitMTDYTD@MTD@Plant,\n\t\t{Fin Year} = SplitMTDYTD@MTD@{Fin Year},\n\t\tMonth = SplitMTDYTD@MTD@Month,\n\t\t{KPI Name} = SplitMTDYTD@MTD@{KPI Name},\n\t\tfkMeasure = SplitMTDYTD@MTD@fkMeasure,\n\t\tValueMTD,\n\t\tValueYTD\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Select2\nLookupYear select(mapColumn(\n\t\tfkMeasure,\n\t\tValueMTD,\n\t\tValueYTD,\n\t\tfkSite,\n\t\tMonthN,\n\t\tNYear\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Select3\nSplitMTDYTD@YTD select(mapColumn(\n\t\tPlant,\n\t\t{Fin Year},\n\t\tMonth,\n\t\t{MTD/YTD},\n\t\t{KPI Name},\n\t\tTarget\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectDebug\nOtherFields sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tpkiTargets as long,\n\t\tfkMeasure as long,\n\t\tfkSite as long,\n\t\tfkDate as date,\n\t\tfkTimeLine as integer,\n\t\tValueMTD as double,\n\t\tValueYTD as double,\n\t\tLastUpdated as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tdateFormat:'yyyy-MM-dd',\n\ttimestampFormat:'yyyy.MM.dd HH:mm:ss',\n\terrorHandlingOption: 'allErrors',\n\ttransactionCommit: 'single',\n\treportSuccessOnError: false,\n\tmapColumn(\n\t\tValueMTD,\n\t\tValueYTD,\n\t\tfkMeasure,\n\t\tfkTimeLine = fkTimeline,\n\t\tfkDate,\n\t\tLastUpdated,\n\t\tfkSite\n\t)) ~> DWTargets\nSelectDebug sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tPlant as string,\n\t\t{Fin Year} as string,\n\t\tMonth as string,\n\t\t{MTD/YTD} as string,\n\t\t{KPI Name} as string,\n\t\tTarget as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'allErrors',\n\ttransactionCommit: 'single',\n\treportSuccessOnError: true) ~> DebugSink"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ODS_TargetStaging')]",
				"[concat(variables('factoryId'), '/datasets/REF_TargetMapping')]",
				"[concat(variables('factoryId'), '/datasets/REF_SiteLookup')]",
				"[concat(variables('factoryId'), '/datasets/REF_Month')]",
				"[concat(variables('factoryId'), '/datasets/REF_Year')]",
				"[concat(variables('factoryId'), '/datasets/DW_Targets')]",
				"[concat(variables('factoryId'), '/datasets/DebugOutput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Test Lookipups')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "LookupSite",
								"type": "DatasetReference"
							},
							"name": "LookupSite"
						},
						{
							"dataset": {
								"referenceName": "LookupTestSourceDS",
								"type": "DatasetReference"
							},
							"name": "LookupTestSource"
						}
					],
					"sinks": [
						{
							"name": "LookupTestSiteSink"
						},
						{
							"dataset": {
								"referenceName": "LookupTestResSink",
								"type": "DatasetReference"
							},
							"name": "LookupTestResSink"
						}
					],
					"transformations": [
						{
							"name": "Select1"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Select2"
						}
					],
					"script": "source(output(\n\t\tSiteName as string,\n\t\tSiteLookup as string,\n\t\tfkSite as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> LookupSite\nsource(output(\n\t\tBrewName as string,\n\t\tDateStarting as date,\n\t\tTimeLine as string,\n\t\tFlowMeasure as string,\n\t\tSection as string,\n\t\tArea as string,\n\t\tValue as double,\n\t\tLine as string,\n\t\tBrewhouse as string,\n\t\tMetricName as string,\n\t\tPeriodDate as date,\n\t\tLastUpdated as timestamp,\n\t\tpkiSDLevers as long,\n\t\tfkBatchID as integer,\n\t\tSourceLine as long\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> LookupTestSource\nLookupTestSource select(mapColumn(\n\t\tBrewName,\n\t\tTimeLine,\n\t\tFlowMeasure,\n\t\tSection,\n\t\tArea,\n\t\tLine,\n\t\tBrewhouse,\n\t\tMetricName,\n\t\tpkiSDLevers,\n\t\tSourceLine\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Select1\nSelect1 derive(fkSite = LookupTestSiteSink#lookup(BrewName).fkSite) ~> DerivedColumn1\nLookupSite select(mapColumn(\n\t\tSiteLookup,\n\t\tfkSite\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: true) ~> Select2\nSelect2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tkeys:['SiteLookup'],\n\tstore: 'cache',\n\tformat: 'inline',\n\toutput: false,\n\tsaveOrder: 1,\n\tmapColumn(\n\t\tSiteLookup,\n\t\tfkSite\n\t)) ~> LookupTestSiteSink\nDerivedColumn1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tBrewName as string,\n\t\tTimeLine as string,\n\t\tFlowMeasure as string,\n\t\tfkSite as long\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tBrewName,\n\t\tTimeLine,\n\t\tFlowMeasure,\n\t\tfkSite\n\t)) ~> LookupTestResSink"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LookupSite')]",
				"[concat(variables('factoryId'), '/datasets/LookupTestSourceDS')]",
				"[concat(variables('factoryId'), '/datasets/LookupTestResSink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TestDateCalcsFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dboTestTable1",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "REF_Month",
								"type": "DatasetReference"
							},
							"name": "MonthLU"
						},
						{
							"dataset": {
								"referenceName": "REF_Year",
								"type": "DatasetReference"
							},
							"name": "YearLU"
						},
						{
							"dataset": {
								"referenceName": "REF_SiteLookup",
								"type": "DatasetReference"
							},
							"name": "SiteLU"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "dboTestTable2",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "LookupYear"
						},
						{
							"name": "LookupMonth"
						},
						{
							"name": "LookupSite"
						}
					],
					"script": "source(output(\n\t\tpki as long,\n\t\tFinYear as string,\n\t\tMonth as string,\n\t\tfkDate as date,\n\t\tfkDateTime as timestamp,\n\t\tSite as string,\n\t\tfkSite as long,\n\t\tfkTimeLine as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> source1\nsource(output(\n\t\tName as string,\n\t\tMonthN as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> MonthLU\nsource(output(\n\t\tFYear as string,\n\t\tNYear as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> YearLU\nsource(output(\n\t\tSiteName as string,\n\t\tSiteLookup as string,\n\t\tfkSite as long\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SiteLU\nLookupMonth derive(fkDate = toDate(addDays(addMonths(toTimestamp(toString(NYear) + '.01.01', 'yyyy.MM.dd'), MonthN), -1)),\n\t\tfkDateTime = addDays(addMonths(toTimestamp(toString(NYear) + '.01.01', 'yyyy.MM.dd'), MonthN), -1),\n\t\tfkTimeLine = 3) ~> DerivedColumn1\nsource1 select(mapColumn(\n\t\tFinYear,\n\t\tMonth,\n\t\tSite\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nLookupSite, YearLU lookup(FinYear == FYear,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupYear\nLookupYear, MonthLU lookup(Month == Name,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupMonth\nSelect1, SiteLU lookup(Site == SiteLookup,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupSite\nDerivedColumn1 sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tpki as long,\n\t\tFinYear as string,\n\t\tMonth as string,\n\t\tfkDate as date,\n\t\tfkDateTime as timestamp,\n\t\tSite as string,\n\t\tfkSite as long,\n\t\tfkTimeLine as integer\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tdateFormat:'yyyy/MM/dd',\n\ttimestampFormat:'yyyy.MM.dd HH:mm:ss',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tFinYear,\n\t\tMonth,\n\t\tfkDate,\n\t\tfkDateTime,\n\t\tSite,\n\t\tfkSite,\n\t\tfkTimeLine\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dboTestTable1')]",
				"[concat(variables('factoryId'), '/datasets/REF_Month')]",
				"[concat(variables('factoryId'), '/datasets/REF_Year')]",
				"[concat(variables('factoryId'), '/datasets/REF_SiteLookup')]",
				"[concat(variables('factoryId'), '/datasets/dboTestTable2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RunSchedule')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "plPhysChem",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2021-11-08T12:10:00",
						"timeZone": "South Africa Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								0
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/plPhysChem')]"
			]
		}
	]
}