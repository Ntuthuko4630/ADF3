{
	"name": "DFFactKPI_ETL2_copy1",
	"properties": {
		"folder": {
			"name": "Fact DF"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ODS_SDLevers",
						"type": "DatasetReference"
					},
					"name": "StagingTable"
				},
				{
					"dataset": {
						"referenceName": "SourceIDLookup",
						"type": "DatasetReference"
					},
					"name": "SourceIDs"
				},
				{
					"dataset": {
						"referenceName": "REF_FactLookup",
						"type": "DatasetReference"
					},
					"name": "FactLookup"
				},
				{
					"dataset": {
						"referenceName": "REF_MetricLookup",
						"type": "DatasetReference"
					},
					"name": "MetricLookup"
				},
				{
					"dataset": {
						"referenceName": "REF_SiteLookup",
						"type": "DatasetReference"
					},
					"name": "SIteLookup"
				},
				{
					"dataset": {
						"referenceName": "REF_LocationLookup",
						"type": "DatasetReference"
					},
					"name": "LocationLookup"
				},
				{
					"dataset": {
						"referenceName": "REF_TimeLineLookup",
						"type": "DatasetReference"
					},
					"name": "TimeLineLookup"
				},
				{
					"dataset": {
						"referenceName": "REF_PackLineLookup",
						"type": "DatasetReference"
					},
					"name": "PackLineLookup"
				},
				{
					"dataset": {
						"referenceName": "REF_BrewhouseLookup",
						"type": "DatasetReference"
					},
					"name": "BrewhouseLookup"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DWFactKPI",
						"type": "DatasetReference"
					},
					"name": "DWFactKPI1",
					"description": "Update DWFactKPI"
				},
				{
					"dataset": {
						"referenceName": "DWFactKPI",
						"type": "DatasetReference"
					},
					"name": "DWFactKPI2",
					"description": "Update DWFactKPI"
				},
				{
					"dataset": {
						"referenceName": "DebugOutput",
						"type": "DatasetReference"
					},
					"name": "DriftedDebugSink"
				},
				{
					"name": "SiteLookupCache"
				},
				{
					"name": "MetricLookupCache"
				},
				{
					"name": "LocationCache"
				},
				{
					"name": "TimeLineCache"
				},
				{
					"name": "PackLineCache"
				},
				{
					"name": "BrewhouseCache"
				}
			],
			"transformations": [
				{
					"name": "UpdateRecords",
					"description": "Input rows that match on SourceLine"
				},
				{
					"name": "ExistingHash",
					"description": "Hash of characterising fields to match WTD and MTD elements"
				},
				{
					"name": "MarkUpdate1",
					"description": "Update the value and lastupdated date"
				},
				{
					"name": "InputHash",
					"description": "Hash of elements to identify similar records"
				},
				{
					"name": "NewRecords",
					"description": "Input rows that do not match on SourceLine"
				},
				{
					"name": "SplitTimeLines",
					"description": "Split MTD and WTD records from DAY records"
				},
				{
					"name": "MarkUpdate2",
					"description": "Update the value, sourceline and lastupdated date"
				},
				{
					"name": "Lookup1"
				},
				{
					"name": "RecentUpdates",
					"description": "Filter input fields updated more recently than the fact field"
				},
				{
					"name": "Select1",
					"description": "pki and new value and lastupdated"
				},
				{
					"name": "Select2",
					"description": "PKI, and new sourceline, lastupdated and value"
				},
				{
					"name": "KeyFromSourceline"
				},
				{
					"name": "LookupPrimaryKey",
					"description": "Lookup primary key for matched record from sourceline"
				},
				{
					"name": "LookupKeys"
				},
				{
					"name": "LocLookup"
				},
				{
					"name": "PackLineKey"
				},
				{
					"name": "BrewhouseKey"
				},
				{
					"name": "MarkInsert"
				}
			],
			"script": "parameters{\n\tbatchID as integer (0)\n}\nsource(output(\n\t\tBrewName as string,\n\t\tDateStarting as date,\n\t\tTimeLine as string,\n\t\tFlowMeasure as string,\n\t\tSection as string,\n\t\tArea as string,\n\t\tValue as double,\n\t\tLine as string,\n\t\tBrewhouse as string,\n\t\tMetricName as string,\n\t\tPeriodDate as date,\n\t\tLastUpdated as timestamp,\n\t\tpkiSDLevers as long,\n\t\tfkBatchID as integer,\n\t\tSourceLine as long\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> StagingTable\nsource(output(\n\t\tpkiFactKPI as long,\n\t\tSourceLine as long,\n\t\tLastUpdated as timestamp\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SourceIDs\nsource(output(\n\t\tpkiFactKPI as long,\n\t\tfkDate as date,\n\t\tBrewName as string,\n\t\tTimeLine as string,\n\t\tSubdivision as string,\n\t\tLine as string,\n\t\tBrewhouse as string,\n\t\tLocationLookup as string,\n\t\tMetricName as string,\n\t\tSourceLine as long,\n\t\tLastUpdated as timestamp\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> FactLookup\nsource(output(\n\t\tpkiMetric as long,\n\t\tMetricLU as string,\n\t\tCheckCount as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> MetricLookup\nsource(output(\n\t\tSiteName as string,\n\t\tSiteLookup as string,\n\t\tfkSite as long\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SIteLookup\nsource(output(\n\t\tpkiLocation as long,\n\t\tDivision as string,\n\t\tSubdivision as string,\n\t\tLine as string,\n\t\tBrewhouse as string,\n\t\tLocationLookup as string,\n\t\tCheckCount as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> LocationLookup\nsource(output(\n\t\tpkiTimeLine as integer,\n\t\tTimeLine as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> TimeLineLookup\nsource(output(\n\t\tpkiPackLine as long,\n\t\tfkSite as long,\n\t\tLineName as string,\n\t\tCheckCount as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> PackLineLookup\nsource(output(\n\t\tpkiBrewhouse as long,\n\t\tfkSite as long,\n\t\tBrewhouseName as string,\n\t\tCheckCount as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> BrewhouseLookup\nInputHash, SourceIDs exists(StagingTable@SourceLine == SourceIDs@SourceLine,\n\tnegate:false,\n\tbroadcast: 'auto')~> UpdateRecords\nFactLookup derive(hashExisting = md5(toString(fkDate), BrewName, TimeLine, Line, Brewhouse, MetricName)) ~> ExistingHash\nLookupPrimaryKey alterRow(updateIf(true())) ~> MarkUpdate1\nStagingTable derive(InputHash = md5(toString(PeriodDate), BrewName, TimeLine, Line, Brewhouse, MetricName),\n\t\tBatchID = $batchID,\n\t\tLocLookup1 = lower(trim(Area) + trim(coalesce(Line, '')) + trim(coalesce(Brewhouse, ''))),\n\t\tLineLookup = toString(SiteLookupCache#lookup(BrewName).fkSite) + '|' + Line,\n\t\tBrewhouseLookup = toString(SiteLookupCache#lookup(BrewName).fkSite) + '|' + Brewhouse) ~> InputHash\nInputHash, SourceIDs exists(StagingTable@SourceLine == SourceIDs@SourceLine,\n\tnegate:true,\n\tbroadcast: 'auto')~> NewRecords\nNewRecords split(TimeLine == 'MTD' || TimeLine == 'YTD',\n\tdisjoint: false) ~> SplitTimeLines@(MTDWTDTimeLines, DAYTimeLine)\nRecentUpdates alterRow(updateIf(true())) ~> MarkUpdate2\nSplitTimeLines@MTDWTDTimeLines, ExistingHash lookup(InputHash == hashExisting,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> Lookup1\nLookup1 filter(SplitTimeLines@MTDWTDTimeLines@LastUpdated > FactLookup@LastUpdated) ~> RecentUpdates\nMarkUpdate1 select(mapColumn(\n\t\tpkiFactKPI,\n\t\tfkBatchID = BatchID,\n\t\tLastUpdated,\n\t\tValue\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Select1\nMarkUpdate2 select(mapColumn(\n\t\tpkiFactKPI,\n\t\tSourceLine = SplitTimeLines@MTDWTDTimeLines@SourceLine,\n\t\tLastUpdated = SplitTimeLines@MTDWTDTimeLines@LastUpdated,\n\t\tfkBatchID = BatchID,\n\t\tValue\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Select2\nFactLookup select(mapColumn(\n\t\tpkiFactKPI,\n\t\tSourceLine\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> KeyFromSourceline\nUpdateRecords, KeyFromSourceline lookup(StagingTable@SourceLine == KeyFromSourceline@SourceLine,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupPrimaryKey\nSplitTimeLines@DAYTimeLine derive(fkSite = SiteLookupCache#lookup(BrewName).fkSite,\n\t\tfkMetric = MetricLookupCache#lookup(MetricName).fkMetric,\n\t\tfkLocation = LocationCache#lookup(LocLookup1).fkLocation,\n\t\tfkTimeLine = TimeLineCache#lookup(TimeLine).fkTimeLine,\n\t\tfkPackLine = PackLineCache#lookup(LineLookup).fkPackLine,\n\t\tfkBrewhouse = BrewhouseCache#lookup(BrewhouseLookup).fkBrewhouse,\n\t\tfkDomain = 1) ~> LookupKeys\nLocationLookup derive(LocLookup = lower(trim(Subdivision) + trim(coalesce(Line, '')) + trim(coalesce(Brewhouse, '')))) ~> LocLookup\nPackLineLookup derive(LineKey = toString(fkSite) + '|' + LineName) ~> PackLineKey\nBrewhouseLookup derive(BrewhouseKey = toString(fkSite) + '|' + BrewhouseName) ~> BrewhouseKey\nLookupKeys alterRow(insertIf(true())) ~> MarkInsert\nSelect1 sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tpkiFactKPI as long,\n\t\tfkDate as date,\n\t\tfkSite as long,\n\t\tfkLocation as long,\n\t\tfkPackLine as long,\n\t\tfkBrewhouse as long,\n\t\tfkMetric as long,\n\t\tfkDomain as integer,\n\t\tfkTimeLine as integer,\n\t\tValue as double,\n\t\tWeightingFactor as double,\n\t\tTarget as double,\n\t\tTargetWeightingFactor as double,\n\t\tSourceLine as long,\n\t\tfkBatch as long,\n\t\tLastUpdated as timestamp,\n\t\tDisable as boolean\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['pkiFactKPI'],\n\tskipKeyWrites:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tValue,\n\t\tLastUpdated,\n\t\tpkiFactKPI\n\t)) ~> DWFactKPI1\nSelect2 sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tpkiFactKPI as long,\n\t\tfkDate as date,\n\t\tfkSite as long,\n\t\tfkLocation as long,\n\t\tfkPackLine as long,\n\t\tfkBrewhouse as long,\n\t\tfkMetric as long,\n\t\tfkDomain as integer,\n\t\tfkTimeLine as integer,\n\t\tValue as double,\n\t\tWeightingFactor as double,\n\t\tTarget as double,\n\t\tTargetWeightingFactor as double,\n\t\tSourceLine as long,\n\t\tfkBatch as long,\n\t\tLastUpdated as timestamp,\n\t\tDisable as boolean\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['pkiFactKPI'],\n\tskipKeyWrites:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tpkiFactKPI,\n\t\tValue,\n\t\tSourceLine,\n\t\tLastUpdated\n\t)) ~> DWFactKPI2\nMarkInsert sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tPlant as string,\n\t\t{Fin Year} as string,\n\t\tMonth as string,\n\t\t{MTD/YTD} as string,\n\t\t{KPI Name} as string,\n\t\tTarget as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> DriftedDebugSink\nSIteLookup sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tkeys:['SiteLookup'],\n\tstore: 'cache',\n\tformat: 'inline',\n\toutput: false,\n\tsaveOrder: 0,\n\tmapColumn(\n\t\tSiteLookup,\n\t\tfkSite\n\t)) ~> SiteLookupCache\nMetricLookup sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tkeys:['MetricLU'],\n\tstore: 'cache',\n\tformat: 'inline',\n\toutput: false,\n\tsaveOrder: 0,\n\tmapColumn(\n\t\tfkMetric = pkiMetric,\n\t\tMetricLU\n\t)) ~> MetricLookupCache\nLocLookup sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tkeys:['LocationLookup'],\n\tstore: 'cache',\n\tformat: 'inline',\n\toutput: false,\n\tsaveOrder: 0,\n\tmapColumn(\n\t\tfkLocation = pkiLocation,\n\t\tLocationLookup\n\t)) ~> LocationCache\nTimeLineLookup sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tkeys:['TimeLine'],\n\tstore: 'cache',\n\tformat: 'inline',\n\toutput: false,\n\tsaveOrder: 0,\n\tmapColumn(\n\t\tfkTimeLine = pkiTimeLine,\n\t\tTimeLine\n\t)) ~> TimeLineCache\nPackLineKey sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tkeys:['LineKey'],\n\tstore: 'cache',\n\tformat: 'inline',\n\toutput: false,\n\tsaveOrder: 1,\n\tmapColumn(\n\t\tfkPackLine = pkiPackLine,\n\t\tLineKey\n\t)) ~> PackLineCache\nBrewhouseKey sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tkeys:['BrewhouseKey'],\n\tstore: 'cache',\n\tformat: 'inline',\n\toutput: false,\n\tsaveOrder: 1,\n\tmapColumn(\n\t\tfkBrewhouse = pkiBrewhouse,\n\t\tBrewhouseKey\n\t)) ~> BrewhouseCache"
		}
	}
}